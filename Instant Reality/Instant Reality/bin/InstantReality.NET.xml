<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InstantReality.NET</name>
    </assembly>
    <members>
        <member name="T:Vrml.EAI.Event.BrowserDelegate">
             <summary>
             Delegate that gets called when the status of a browser changes (obsolete).
             </summary>
             <remarks>
             <para>
             This delegate defines the signature of a method that receives
             information about X3D browser status changes. Write a method that
             has the same signature, add it to the <see cref="T:Vrml.EAI.Browser"/> object
             by calling its <see cref="M:Vrml.EAI.Browser.AddBrowserDelegate(Vrml.EAI.Event.BrowserDelegate)"/> method, and
             that method will be called when the status changes. The
             <see cref="T:Vrml.EAI.Event.BrowserEvent"/> object you'll receive as a parameter of
             the method contains more information about the specific event.
             When you're no longer interested in receiving status change
             information, remove the delegate from the <see cref="T:Vrml.EAI.Browser"/>
             object by calling its <see cref="M:Vrml.EAI.Browser.RemoveBrowserDelegate(Vrml.EAI.Event.BrowserDelegate)"/>
             method.
             </para>
             <para>
             Warning: Something really important that you have to keep in mind
             about browser delegates is that they get called by a special thread
             created inside the EAI implementation, not by the main thread of your
             application. For this reason, you have to synchronize access to variables
             and calls to other methods, i.e. you have to make your code thread-safe.
             For more information about thread-safety, read a good book about thread
             programming in C#. The EAI interface itself is thread-safe, therefore you
             do not have to care about thread synchronization when calling EAI methods.
             Also keep in mind that your code inside the delegate should not block - as
             long as the thread is inside your delegate, no other delegate gets called.
             For performance reasons, do not try to do long-winded operations in your
             delegate, instead return as soon as possible. If you need to perform lengthy
             operations, create a new thread to do them.
             </para>
             <para>
             This class is obsolete! Please use <see cref="T:Vrml.EAI.Event.BrowserEventHandler"/> instead.
             </para>
             </remarks>
             <param name="evt">
             A <see cref="T:Vrml.EAI.Event.BrowserEvent"/> object that contains information about the event.
             </param>
             <example>
             The following example shows the skeleton of a browser delegate, and
             it demonstrates how to add the delegate to the <see cref="T:Vrml.EAI.Browser"/>
             object, and how to remove the delegate when you're finished:
             <code>
             public class MyClass
             {
                 private static void OnBrowserEvent(Vrml.EAI.Event.BrowserEvent evt)
                 {
                     // Get the Browser object whose status changed
                     Vrml.EAI.Browser browser = evt.Source;
                     switch (evt.ID)
                     {
                     case Vrml.EAI.Event.BrowserEvent.INITIALIZED:
                         // The browser finished to load a new scene
                         ...
                         break;
                     case Vrml.EAI.Event.BrowserEvent.SHUTDOWN:
                         // The browser is about to unload a scene
                         ...
                         break;
                     case Vrml.EAI.Event.BrowserEvent.URL_ERROR:
                         // Download from an URL failed
                         ...
                         break;
                     case Vrml.EAI.Event.BrowserEvent.CONNECTION_ERROR:
                         // An error occurred in the communication with the browser
                         ...
                         break;
                     }
                 }
            
                 public static void Main(string[] args)
                 {
                     ...
                     Vrml.EAI.Browser browser = ...;
                     browser.AddBrowserDelegate(OnBrowserEvent);
                     ...
                     browser.RemoveBrowserDelegate(OnBrowserEvent);
                     ...
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:Vrml.EAI.Event.BrowserEvent">
            <summary>
            Contains information about a browser event (obsolete).
            </summary>
            <remarks>
            <para>
            When you implement a <see cref="T:Vrml.EAI.Event.BrowserDelegate"/>, you'll
            get a BrowserEvent object as a parameter that contains a
            reference to the <see cref="T:Vrml.EAI.Browser"/> object whose status
            changed as well as an event ID that specifies what exactly
            happened.
            </para>
            <para>
            This class is obsolete! Please use <see cref="T:Vrml.EAI.Event.BrowserEventArgs"/>
            in combination with <see cref="T:Vrml.EAI.Event.BrowserEventHandler"/> instead.
            </para>
            </remarks>
            <example>
            The following example shows the skeleton of a browser delegate, and
            how the BrowserEvent object is used inside the delegate:
            <code>
            private static void OnBrowserEvent(Vrml.EAI.Event.BrowserEvent evt)
            {
                // Get the Browser object whose status changed
                Vrml.EAI.Browser browser = evt.Source;
                switch (evt.ID)
                {
                case Vrml.EAI.Event.BrowserEvent.INITIALIZED:
                    // The browser finished to load a new scene
                    ...
                    break;
                case Vrml.EAI.Event.BrowserEvent.SHUTDOWN:
                    // The browser is about to unload a scene
                    ...
                    break;
                case Vrml.EAI.Event.BrowserEvent.URL_ERROR:
                    // Download from an URL failed
                    ...
                    break;
                case Vrml.EAI.Event.BrowserEvent.CONNECTION_ERROR:
                    // An error occurred when communicating with the browser
                    ...
                    break;
                }
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Event.BrowserEvent.INITIALIZED">
            <summary>
            Identifier for events that get sent when the browser finished
            to load a new 3D scene.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Vrml.EAI.Browser"/> object issues an INITIALIZED event
            when the X3D browser finished to load a 3D scene. This happens
            after calling the <see cref="M:Vrml.EAI.Browser.LoadURL(System.String[],System.String[])"/> or
            <see cref="M:Vrml.EAI.Browser.ReplaceWorld(Vrml.EAI.Node[])"/> methods of the
            <see cref="T:Vrml.EAI.Browser"/> object, or when the user loads a new
            scene via the browser user interface.
            </para>
            <para>
            You usually use this event as a hint when to start interaction
            with a new scene after calling <see cref="M:Vrml.EAI.Browser.LoadURL(System.String[],System.String[])"/> or
            <see cref="M:Vrml.EAI.Browser.ReplaceWorld(Vrml.EAI.Node[])"/>, i.e. after receiving this
            event it is possible to get references to nodes by calling
            <see cref="M:Vrml.EAI.Browser.GetNode(System.String)"/>, or to create new routes by
            calling <see cref="M:Vrml.EAI.Browser.AddRoute(Vrml.EAI.Node,System.String,Vrml.EAI.Node,System.String)"/>.
            </para>
            </remarks>
            <example>
            The following example demonstrates how to check if an
            INITIALIZED event happened:
            <code>
            Vrml.EAI.Event.BrowserEvent evt = ...;
            if (evt.ID == Vrml.EAI.Event.BrowserEvent.INITIALIZED)
            {
                // The browser finished to load a new scene
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Event.BrowserEvent.SHUTDOWN">
            <summary>
            Identifier for events that get sent when the browser is about
            to unload a 3D scene.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Vrml.EAI.Browser"/> object issues a SHUTDOWN event
            when the X3D browser is about to unload a 3D scene. This happens
            after calling the <see cref="M:Vrml.EAI.Browser.LoadURL(System.String[],System.String[])"/> or
            <see cref="M:Vrml.EAI.Browser.ReplaceWorld(Vrml.EAI.Node[])"/> methods of the
            <see cref="T:Vrml.EAI.Browser"/> object, or when the user loads a new
            scene via the browser user interface or quits the browser.
            </para>
            <para>
            Receiving this event means that all existing references to
            <see cref="T:Vrml.EAI.Node">nodes</see>, <see cref="T:Vrml.EAI.Field.EventIn">event-in slots</see>
            and <see cref="T:Vrml.EAI.Field.EventOut">event-out slots</see> are about to become invalid.
            Do not call any methods of these objects anymore, instead dispose them.
            </para>
            </remarks>
            <example>
            The following example demonstrates how to check if a
            SHUTDOWN event happened:
            <code>
            Vrml.EAI.Event.BrowserEvent evt = ...;
            if (evt.ID == Vrml.EAI.Event.BrowserEvent.SHUTDOWN)
            {
                // The browser is about to unload a scene
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Event.BrowserEvent.URL_ERROR">
            <summary>
            Identifier for events that get sent when the download from an
            URL failed.
            </summary>
            <remarks>
            The <see cref="T:Vrml.EAI.Browser"/> object issues an URL_ERROR event
            when the download from an URL failed. This might happen
            after calling the <see cref="M:Vrml.EAI.Browser.LoadURL(System.String[],System.String[])"/> or
            <see cref="M:Vrml.EAI.Browser.ReplaceWorld(Vrml.EAI.Node[])"/> methods of the
            <see cref="T:Vrml.EAI.Browser"/> object.
            </remarks>
            <example>
            The following example demonstrates how to check if an
            URL_ERROR event happened:
            <code>
            Vrml.EAI.Event.BrowserEvent evt = ...;
            if (evt.ID == Vrml.EAI.Event.BrowserEvent.URL_ERROR)
            {
                // Download from an URL failed
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Event.BrowserEvent.CONNECTION_ERROR">
            <summary>
            Identifier for events that get sent when the communication with
            the browser failed.
            </summary>
            <remarks>
            The <see cref="T:Vrml.EAI.Browser"/> object issues a CONNECTION_ERROR event
            when the communication with the browser failed. This can happen
            anytime and usually means that you have to reinitialize the whole
            session by creating a new <see cref="T:Vrml.EAI.Browser"/> object.
            </remarks>
            <example>
            The following example demonstrates how to check if a
            CONNECTION_ERROR event happened:
            <code>
            Vrml.EAI.Event.BrowserEvent evt = ...;
            if (evt.ID == Vrml.EAI.Event.BrowserEvent.CONNECTION_ERROR)
            {
                // An error occurred when communicating with the browser
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Event.BrowserEvent.LAST_IDENTIFIER">
            <summary>
            Defines the first event identifier that is not used
            by EAI standard events.
            </summary>
            <remarks>
            All event IDs for EAI standard events are smaller than this
            identifier. There might be browser-specific events whose ID
            is greater than or equal to this identifier.
            </remarks>
            <example>
            The following example demonstrates how to check if a
            browser event is a standard EAI event or a browser-specific
            event:
            <code>
            Vrml.EAI.Event.BrowserEvent evt = ...;
            if (evt.ID &lt; Vrml.EAI.Event.BrowserEvent.LAST_IDENTIFIER)
            {
                // A standard EAI event happened
                ...
            }
            else
            {
                // A browser-specific event happened
                ...
            }
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Event.BrowserEvent.#ctor(Vrml.EAI.Browser,System.Int32)">
            <summary>
            Initializes a <see cref="T:Vrml.EAI.Event.BrowserEvent"/> with a given browser and event ID.
            </summary>
            <remarks>
            Usually, you do not create your own browser events - they get generated
            by the <see cref="T:Vrml.EAI.Browser"/> object when its status changes, and you
            get them as a parameter to your <see cref="T:Vrml.EAI.Event.BrowserDelegate"/>. But
            nevertheless this constructor is public which allows you to create your
            own events and send them to your delegate.
            </remarks>
            <param name="b">The <see cref="T:Vrml.EAI.Browser"/> object that produced this event.</param>
            <param name="action">
            The type of event. This is should be one of the constants <see cref="F:Vrml.EAI.Event.BrowserEvent.INITIALIZED"/>,
            <see cref="F:Vrml.EAI.Event.BrowserEvent.SHUTDOWN"/>, <see cref="F:Vrml.EAI.Event.BrowserEvent.URL_ERROR"/> or <see cref="F:Vrml.EAI.Event.BrowserEvent.CONNECTION_ERROR"/>
            defined in this class.
            </param>
            <example>
            The following example demonstrates how you can create your own
            URL_ERROR event and send it to your delegate:
            <code>
            Vrml.EAI.Browser browser = ...;
            Vrml.EAI.Event.BrowserEvent evt = new Vrml.EAI.Event.BrowserEvent(browser, Vrml.EAI.Event.BrowserEvent.URL_ERROR);
            OnBrowserEvent(evt);
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">
            when you specify an invalid event type.
            </exception>
        </member>
        <member name="P:Vrml.EAI.Event.BrowserEvent.ID">
            <summary>The type of event.</summary>
            <value>
            One of the constants <see cref="F:Vrml.EAI.Event.BrowserEvent.INITIALIZED"/>,
            <see cref="F:Vrml.EAI.Event.BrowserEvent.SHUTDOWN"/>, <see cref="F:Vrml.EAI.Event.BrowserEvent.URL_ERROR"/>
            or <see cref="F:Vrml.EAI.Event.BrowserEvent.CONNECTION_ERROR"/> defined in this class.
            </value>
            <remarks>
            This is a read-only property that allows the get information
            about which specific event actually happened. This property
            can only be set via the <see cref="M:Vrml.EAI.Event.BrowserEvent.#ctor(Vrml.EAI.Browser,System.Int32)">constructor</see>
            when creating new <see cref="T:Vrml.EAI.Event.BrowserEvent"/> objects.
            </remarks>
            <example>
            The following example shows how to find out which type of
            event actually happened:
            <code>
            Vrml.EAI.Event.BrowserEvent evt = ...;
            switch (evt.ID)
            {
            case Vrml.EAI.Event.BrowserEvent.INITIALIZED:
                // The browser finished to load a new scene
                ...
                break;
            case Vrml.EAI.Event.BrowserEvent.SHUTDOWN:
                // The browser is about to unload a scene
                ...
                break;
            case Vrml.EAI.Event.BrowserEvent.URL_ERROR:
                // Download from an URL failed
                ...
                break;
            case Vrml.EAI.Event.BrowserEvent.CONNECTION_ERROR:
                // An error occurred when communicating with the browser
                ...
                break;
            }
            </code>
            </example>
        </member>
        <member name="P:Vrml.EAI.Event.BrowserEvent.Source">
            <summary>The <see cref="T:Vrml.EAI.Browser"/> object that produced this event.</summary>
            <value>The <see cref="T:Vrml.EAI.Browser"/> object that produced this event.</value>
            <remarks>
            This is a read-only property. You can only set this property via the
            <see cref="M:Vrml.EAI.Event.BrowserEvent.#ctor(Vrml.EAI.Browser,System.Int32)">constructor</see> when creating
            new <see cref="T:Vrml.EAI.Event.BrowserEvent"/> objects.
            </remarks>
            <example>
            The following example shows how to find out which <see cref="T:Vrml.EAI.Browser"/>
            object created the event:
            <code>
            Vrml.EAI.Event.BrowserEvent evt = ...;
            Vrml.EAI.Browser browser = evt.Source;
            </code>
            </example>
        </member>
        <member name="T:Vrml.EAI.Event.BrowserEventArgs">
            <summary>
            Contains information about a browser event.
            </summary>
            <remarks>
            When you implement a <see cref="T:Vrml.EAI.Event.BrowserEventHandler"/>, you'll
            get a BrowserEventArgs object as a parameter that contains an
            event ID that specifies what exactly happened.
            </remarks>
            <example>
            The following example shows the skeleton of a browser event handler, and
            how the BrowserEventArgs object is used inside the handler:
            <code>
            private static void OnBrowserEvent(object sender, Vrml.EAI.Event.BrowserEventArgs e)
            {
                switch (e.ID)
                {
                case Vrml.EAI.Event.BrowserEventArgs.INITIALIZED:
                    // The browser finished to load a new scene
                    ...
                    break;
                case Vrml.EAI.Event.BrowserEventArgs.SHUTDOWN:
                    // The browser is about to unload a scene
                    ...
                    break;
                case Vrml.EAI.Event.BrowserEventArgs.URL_ERROR:
                    // Download from an URL failed
                    ...
                    break;
                case Vrml.EAI.Event.BrowserEventArgs.CONNECTION_ERROR:
                    // An error occurred when communicating with the browser
                    ...
                    break;
                }
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Event.BrowserEventArgs.INITIALIZED">
            <summary>
            Identifier for events that get sent when the browser finished
            to load a new 3D scene.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Vrml.EAI.Browser"/> object issues an INITIALIZED event
            when the X3D browser finished to load a 3D scene. This happens
            after calling the <see cref="M:Vrml.EAI.Browser.LoadURL(System.String[],System.String[])"/> or
            <see cref="M:Vrml.EAI.Browser.ReplaceWorld(Vrml.EAI.Node[])"/> methods of the
            <see cref="T:Vrml.EAI.Browser"/> object, or when the user loads a new
            scene via the browser user interface.
            </para>
            <para>
            You usually use this event as a hint when to start interaction
            with a new scene after calling <see cref="M:Vrml.EAI.Browser.LoadURL(System.String[],System.String[])"/> or
            <see cref="M:Vrml.EAI.Browser.ReplaceWorld(Vrml.EAI.Node[])"/>, i.e. after receiving this
            event it is possible to get references to nodes by calling
            <see cref="M:Vrml.EAI.Browser.GetNode(System.String)"/>, or to create new routes by
            calling <see cref="M:Vrml.EAI.Browser.AddRoute(Vrml.EAI.Node,System.String,Vrml.EAI.Node,System.String)"/>.
            </para>
            </remarks>
            <example>
            The following example demonstrates how to check if an
            INITIALIZED event happened:
            <code>
            Vrml.EAI.Event.BrowserEventArgs e = ...;
            if (e.ID == Vrml.EAI.Event.BrowserEventArgs.INITIALIZED)
            {
                // The browser finished to load a new scene
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Event.BrowserEventArgs.SHUTDOWN">
            <summary>
            Identifier for events that get sent when the browser is about
            to unload a 3D scene.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Vrml.EAI.Browser"/> object issues a SHUTDOWN event
            when the X3D browser is about to unload a 3D scene. This happens
            after calling the <see cref="M:Vrml.EAI.Browser.LoadURL(System.String[],System.String[])"/> or
            <see cref="M:Vrml.EAI.Browser.ReplaceWorld(Vrml.EAI.Node[])"/> methods of the
            <see cref="T:Vrml.EAI.Browser"/> object, or when the user loads a new
            scene via the browser user interface or quits the browser.
            </para>
            <para>
            Receiving this event means that all existing references to
            <see cref="T:Vrml.EAI.Node">nodes</see>, <see cref="T:Vrml.EAI.Field.EventIn">event-in slots</see>
            and <see cref="T:Vrml.EAI.Field.EventOut">event-out slots</see> are about to become invalid.
            Do not call any methods of these objects anymore, instead dispose them.
            </para>
            </remarks>
            <example>
            The following example demonstrates how to check if a
            SHUTDOWN event happened:
            <code>
            Vrml.EAI.Event.BrowserEventArgs e = ...;
            if (e.ID == Vrml.EAI.Event.BrowserEventArgs.SHUTDOWN)
            {
                // The browser is about to unload a scene
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Event.BrowserEventArgs.URL_ERROR">
            <summary>
            Identifier for events that get sent when the download from an
            URL failed.
            </summary>
            <remarks>
            The <see cref="T:Vrml.EAI.Browser"/> object issues an URL_ERROR event
            when the download from an URL failed. This might happen
            after calling the <see cref="M:Vrml.EAI.Browser.LoadURL(System.String[],System.String[])"/> or
            <see cref="M:Vrml.EAI.Browser.ReplaceWorld(Vrml.EAI.Node[])"/> methods of the
            <see cref="T:Vrml.EAI.Browser"/> object.
            </remarks>
            <example>
            The following example demonstrates how to check if an
            URL_ERROR event happened:
            <code>
            Vrml.EAI.Event.BrowserEventArgs e = ...;
            if (e.ID == Vrml.EAI.Event.BrowserEventArgs.URL_ERROR)
            {
                // Download from an URL failed
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Event.BrowserEventArgs.CONNECTION_ERROR">
            <summary>
            Identifier for events that get sent when the communication with
            the browser failed.
            </summary>
            <remarks>
            The <see cref="T:Vrml.EAI.Browser"/> object issues a CONNECTION_ERROR event
            when the communication with the browser failed. This can happen
            anytime and usually means that you have to reinitialize the whole
            session by creating a new <see cref="T:Vrml.EAI.Browser"/> object.
            </remarks>
            <example>
            The following example demonstrates how to check if a
            CONNECTION_ERROR event happened:
            <code>
            Vrml.EAI.Event.BrowserEventArgs e = ...;
            if (e.ID == Vrml.EAI.Event.BrowserEventArgs.CONNECTION_ERROR)
            {
                // An error occurred when communicating with the browser
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Event.BrowserEventArgs.LAST_IDENTIFIER">
            <summary>
            Defines the first event identifier that is not used
            by EAI standard events.
            </summary>
            <remarks>
            All event IDs for EAI standard events are smaller than this
            identifier. There might be browser-specific events whose ID
            is greater than or equal to this identifier.
            </remarks>
            <example>
            The following example demonstrates how to check if a
            browser event is a standard EAI event or a browser-specific
            event:
            <code>
            Vrml.EAI.Event.BrowserEventArgs e = ...;
            if (e.ID &lt; Vrml.EAI.Event.BrowserEventArgs.LAST_IDENTIFIER)
            {
                // A standard EAI event happened
                ...
            }
            else
            {
                // A browser-specific event happened
                ...
            }
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Event.BrowserEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a <see cref="T:Vrml.EAI.Event.BrowserEventArgs"/> with a given event ID.
            </summary>
            <remarks>
            Usually, you do not create your own browser events - they get generated
            by the <see cref="T:Vrml.EAI.Browser"/> object when its status changes, and you
            get them as a parameter to your <see cref="T:Vrml.EAI.Event.BrowserEventHandler"/>. But
            nevertheless this constructor is public which allows you to create your
            own events and send them to your handler.
            </remarks>
            <param name="action">
            The type of event. This is should be one of the constants <see cref="F:Vrml.EAI.Event.BrowserEventArgs.INITIALIZED"/>,
            <see cref="F:Vrml.EAI.Event.BrowserEventArgs.SHUTDOWN"/>, <see cref="F:Vrml.EAI.Event.BrowserEventArgs.URL_ERROR"/> or <see cref="F:Vrml.EAI.Event.BrowserEventArgs.CONNECTION_ERROR"/>
            defined in this class.
            </param>
            <example>
            The following example demonstrates how you can create your own
            URL_ERROR event and send it to your handler:
            <code>
            Vrml.EAI.Browser browser = ...;
            Vrml.EAI.Event.BrowserEventArgs e = new Vrml.EAI.Event.BrowserEventArgs(Vrml.EAI.Event.BrowserEvent.URL_ERROR);
            OnBrowserEvent(browser, e);
            </code>
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">
            when you specify an invalid event type.
            </exception>
        </member>
        <member name="P:Vrml.EAI.Event.BrowserEventArgs.ID">
            <summary>The type of event.</summary>
            <value>
            One of the constants <see cref="F:Vrml.EAI.Event.BrowserEventArgs.INITIALIZED"/>,
            <see cref="F:Vrml.EAI.Event.BrowserEventArgs.SHUTDOWN"/>, <see cref="F:Vrml.EAI.Event.BrowserEventArgs.URL_ERROR"/>
            or <see cref="F:Vrml.EAI.Event.BrowserEventArgs.CONNECTION_ERROR"/> defined in this class.
            </value>
            <remarks>
            This is a read-only property that allows the get information
            about which specific event actually happened. This property
            can only be set via the <see cref="M:Vrml.EAI.Event.BrowserEventArgs.#ctor(System.Int32)">constructor</see>
            when creating new <see cref="T:Vrml.EAI.Event.BrowserEventArgs"/> objects.
            </remarks>
            <example>
            The following example shows how to find out which type of
            event actually happened:
            <code>
            Vrml.EAI.Event.BrowserEventArgs e = ...;
            switch (e.ID)
            {
            case Vrml.EAI.Event.BrowserEventArgs.INITIALIZED:
                // The browser finished to load a new scene
                ...
                break;
            case Vrml.EAI.Event.BrowserEventArgs.SHUTDOWN:
                // The browser is about to unload a scene
                ...
                break;
            case Vrml.EAI.Event.BrowserEventArgs.URL_ERROR:
                // Download from an URL failed
                ...
                break;
            case Vrml.EAI.Event.BrowserEventArgs.CONNECTION_ERROR:
                // An error occurred when communicating with the browser
                ...
                break;
            }
            </code>
            </example>
        </member>
        <member name="T:Vrml.EAI.Event.BrowserEventHandler">
             <summary>
             Delegate that gets called when the status of a browser changes.
             </summary>
             <remarks>
             <para>
             This delegate defines the signature of a method that receives
             information about X3D browser status changes. Write a method that
             has the same signature, add it to the <see cref="T:Vrml.EAI.Browser"/> object
             by adding it to the <see cref="E:Vrml.EAI.Browser.BrowserEvent"/> event, and
             that method will be called when the status changes. The
             <see cref="T:Vrml.EAI.Event.BrowserEventArgs"/> object you'll receive as a parameter of
             the method contains more information about the specific event.
             When you're no longer interested in receiving status change
             information, remove the delegate from the <see cref="E:Vrml.EAI.Browser.BrowserEvent"/>
             event.
             </para>
             <para>
             Warning: Something really important that you have to keep in mind
             about browser delegates is that they get called by a special thread
             created inside the EAI implementation, not by the main thread of your
             application. For this reason, you have to synchronize access to variables
             and calls to other methods, i.e. you have to make your code thread-safe.
             For more information about thread-safety, read a good book about thread
             programming in C#. The EAI interface itself is thread-safe, therefore you
             do not have to care about thread synchronization when calling EAI methods.
             Also keep in mind that your code inside the delegate should not block - as
             long as the thread is inside your delegate, no other delegate gets called.
             For performance reasons, do not try to do long-winded operations in your
             delegate, instead return as soon as possible. If you need to perform lengthy
             operations, create a new thread to do them.
             </para>
             </remarks>
             <param name="sender">The <see cref="T:Vrml.EAI.Browser"/> object that produced this event.</param>
             <param name="e">
             A <see cref="T:Vrml.EAI.Event.BrowserEventArgs"/> object that contains information about the event.
             </param>
             <example>
             The following example shows the skeleton of a browser event handler, and
             it demonstrates how to add the handler to the <see cref="T:Vrml.EAI.Browser"/>
             object, and how to remove the handler when you're finished:
             <code>
             public class MyClass
             {
                 private static void OnBrowserEvent(object sender, Vrml.EAI.Event.BrowserEventArgs e)
                 {
                     // Get the Browser object whose status changed
                     Vrml.EAI.Browser browser = (Vrml.EAI.Browser)sender;
                     switch (e.ID)
                     {
                     case Vrml.EAI.Event.BrowserEventArgs.INITIALIZED:
                         // The browser finished to load a new scene
                         ...
                         break;
                     case Vrml.EAI.Event.BrowserEventArgs.SHUTDOWN:
                         // The browser is about to unload a scene
                         ...
                         break;
                     case Vrml.EAI.Event.BrowserEventArgs.URL_ERROR:
                         // Download from an URL failed
                         ...
                         break;
                     case Vrml.EAI.Event.BrowserEventArgs.CONNECTION_ERROR:
                         // An error occurred in the communication with the browser
                         ...
                         break;
                     }
                 }
            
                 public static void Main(string[] args)
                 {
                     ...
                     Vrml.EAI.Browser browser = ...;
                     browser.BrowserEvent += OnBrowserEvent;
                     ...
                     browser.BrowserEvent -= OnBrowserEvent;
                     ...
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:Vrml.EAI.Event.VrmlEvent">
            <summary>
            Contains information about a VRML event (obsolete).
            </summary>
            <remarks>
            <para>
            When you implement a <see cref="T:Vrml.EAI.Event.VrmlEventDelegate"/>, you'll
            get a VrmlEvent object as a parameter that contains a reference to
            the <see cref="T:Vrml.EAI.Field.EventOut"/> object that fired the event
            as well as a timestamp and the user-provided data object attached to
            the <see cref="T:Vrml.EAI.Field.EventOut"/> object.
            </para>
            <para>
            This class is obsolete! Please use <see cref="T:Vrml.EAI.Event.VrmlEventArgs"/>
            in combination with <see cref="T:Vrml.EAI.Event.VrmlEventHandler"/> instead.
            </para>
            </remarks>
            <example>
            The following example shows the skeleton of a vrml event delegate, and
            how the VrmlEvent object is used inside the delegate:
            <code>
            private static Vrml.EAI.Field.EventOutSFColor diffuseColor_changed;
            ...
            private static void OnVrmlEvent(Vrml.EAI.Event.VrmlEvent evt)
            {
                Vrml.EAI.Field.BaseField field = evt.Source;
                double time = evt.Time;
                object data = evt.Data;
                if (field == diffuseColor_changed)
                {
                    // diffuseColor_changed event-out slot fired an event
                    ...
                }
                ...
            }
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Event.VrmlEvent.#ctor(Vrml.EAI.Field.BaseField,System.Double,System.Object)">
            <summary>
            Initializes a <see cref="T:Vrml.EAI.Event.VrmlEvent"/> with a given
            <see cref="T:Vrml.EAI.Field.EventOut"/> object, timestamp
            and user-provided data object.
            </summary>
            <remarks>
            Usually, you do not create your own VRML events - they get generated
            by the <see cref="T:Vrml.EAI.Field.EventOut"/> object when it fires an
            event, and you get them as a parameter to your <see cref="T:Vrml.EAI.Event.VrmlEventDelegate"/>.
            But nevertheless this constructor is public which allows you to create your
            own events and send them to your delegate.
            </remarks>
            <param name="src">
            The <see cref="T:Vrml.EAI.Field.EventOut">event-out slot</see>
            whose value changed.
            </param>
            <param name="ts">
            The time when the event happened, measured in seconds since
            January 1st, 1970, 00:00:00 GMT.
            </param>
            <param name="data">A user-provided data object.</param>
        </member>
        <member name="P:Vrml.EAI.Event.VrmlEvent.Source">
            <summary>
            The <see cref="T:Vrml.EAI.Field.EventOut">event-out slot</see>
            that fired the event.
            </summary>
            <value>
            Reference to the <see cref="T:Vrml.EAI.Field.EventOut"/> object
            that fired the event.
            </value>
            <remarks>
            This is a read-only property. You can only set this property via the
            <see cref="M:Vrml.EAI.Event.VrmlEvent.#ctor(Vrml.EAI.Field.BaseField,System.Double,System.Object)">constructor</see> when
            creating new <see cref="T:Vrml.EAI.Event.VrmlEvent"/> objects.
            </remarks>
            <example>
            The following example shows how to get the <see cref="T:Vrml.EAI.Field.EventOut"/>
            object from the event:
            <code>
            Vrml.EAI.Event.VrmlEvent evt = ...;
            Vrml.EAI.Field.BaseField field = evt.Source;
            </code>
            </example>
        </member>
        <member name="P:Vrml.EAI.Event.VrmlEvent.Time">
            <summary>The time when the event happened.</summary>
            <value>
            The number of seconds since January the 1st, 1970, 00:00:00 GMT when
            the event happened.
            </value>
            <remarks>
            This is a read-only property. You can only set this property via the
            <see cref="M:Vrml.EAI.Event.VrmlEvent.#ctor(Vrml.EAI.Field.BaseField,System.Double,System.Object)">constructor</see> when
            creating new <see cref="T:Vrml.EAI.Event.VrmlEvent"/> objects.
            </remarks>
            <example>
            The following example gets the timestamp from the event, converts it
            to a DateTime object, and prints it to the console:
            <code>
            Vrml.EAI.Event.VrmlEvent evt = ...;
            System.DateTime t = new System.DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc).AddSeconds(evt.Time).ToLocalTime();
            System.Console.WriteLine("Time = " + t);
            </code>
            </example>
        </member>
        <member name="P:Vrml.EAI.Event.VrmlEvent.Data">
            <summary>
            The user-provided data object attached to the
            <see cref="T:Vrml.EAI.Field.EventOut">event-out slot</see>.
            </summary>
            <value>
            The <see cref="P:Vrml.EAI.Field.EventOut.UserData"/> property of
            the <see cref="T:Vrml.EAI.Field.EventOut"/> object that fired the
            event.
            </value>
            <remarks>
            This is a read-only property. You can only set this property via the
            <see cref="M:Vrml.EAI.Event.VrmlEvent.#ctor(Vrml.EAI.Field.BaseField,System.Double,System.Object)">constructor</see> when
            creating new <see cref="T:Vrml.EAI.Event.VrmlEvent"/> objects.
            </remarks>
            <example>
            The following example shows how to get the user-provided data object
            from the event:
            <code>
            Vrml.EAI.Event.VrmlEvent evt = ...;
            object data = evt.Data;
            </code>
            </example>
        </member>
        <member name="T:Vrml.EAI.Event.VrmlEventArgs">
            <summary>
            Contains information about a VRML event.
            </summary>
            <remarks>
            When you implement a <see cref="T:Vrml.EAI.Event.VrmlEventHandler"/>, you'll
            get a VrmlEventArgs object as a parameter that contains the
            timestamp of the event and the user-provided data object attached to
            the <see cref="T:Vrml.EAI.Field.EventOut"/> object.
            </remarks>
            <example>
            The following example shows the skeleton of a vrml event handler, and
            how the VrmlEventArgs object is used inside the handler:
            <code>
            private static Vrml.EAI.Field.EventOutSFColor diffuseColor_changed;
            ...
            private static void OnVrmlEvent(object sender, Vrml.EAI.Event.VrmlEventArgs e)
            {
                Vrml.EAI.Field.BaseField field = (Vrml.EAI.Field.BaseField)sender;
                double time = e.Time;
                object data = e.Data;
                if (field == diffuseColor_changed)
                {
                    // diffuseColor_changed event-out slot fired an event
                    ...
                }
                ...
            }
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Event.VrmlEventArgs.#ctor(System.Double,System.Object)">
            <summary>
            Initializes a <see cref="T:Vrml.EAI.Event.VrmlEventArgs"/> with a
            timestamp and user-provided data object.
            </summary>
            <remarks>
            Usually, you do not create your own VRML events - they get generated
            by the <see cref="T:Vrml.EAI.Field.EventOut"/> object when it fires an
            event, and you get them as a parameter to your <see cref="T:Vrml.EAI.Event.VrmlEventHandler"/>.
            But nevertheless this constructor is public which allows you to create your
            own events and send them to your handler.
            </remarks>
            <param name="ts">
            The time when the event happened, measured in seconds since
            January 1st, 1970, 00:00:00 GMT.
            </param>
            <param name="data">A user-provided data object.</param>
        </member>
        <member name="P:Vrml.EAI.Event.VrmlEventArgs.Time">
            <summary>The time when the event happened.</summary>
            <value>
            The number of seconds since January the 1st, 1970, 00:00:00 GMT when
            the event happened.
            </value>
            <remarks>
            This is a read-only property. You can only set this property via the
            <see cref="M:Vrml.EAI.Event.VrmlEventArgs.#ctor(System.Double,System.Object)">constructor</see> when
            creating new <see cref="T:Vrml.EAI.Event.VrmlEventArgs"/> objects.
            </remarks>
            <example>
            The following example gets the timestamp from the event, converts it
            to a DateTime object, and prints it to the console:
            <code>
            Vrml.EAI.Event.VrmlEventArgs e = ...;
            System.DateTime t = new System.DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc).AddSeconds(e.Time).ToLocalTime();
            System.Console.WriteLine("Time = " + t);
            </code>
            </example>
        </member>
        <member name="P:Vrml.EAI.Event.VrmlEventArgs.Data">
            <summary>
            The user-provided data object attached to the
            <see cref="T:Vrml.EAI.Field.EventOut">event-out slot</see>.
            </summary>
            <value>
            The <see cref="P:Vrml.EAI.Field.EventOut.UserData"/> property of
            the <see cref="T:Vrml.EAI.Field.EventOut"/> object that fired the
            event.
            </value>
            <remarks>
            This is a read-only property. You can only set this property via the
            <see cref="M:Vrml.EAI.Event.VrmlEventArgs.#ctor(System.Double,System.Object)">constructor</see> when
            creating new <see cref="T:Vrml.EAI.Event.VrmlEventArgs"/> objects.
            </remarks>
            <example>
            The following example shows how to get the user-provided data object
            from the event:
            <code>
            Vrml.EAI.Event.VrmlEventArgs e = ...;
            object data = e.Data;
            </code>
            </example>
        </member>
        <member name="T:Vrml.EAI.Event.VrmlEventDelegate">
             <summary>
             Delegate that gets called when an
             <see cref="T:Vrml.EAI.Field.EventOut">event-out slot</see>
             sends an event (obsolete).
             </summary>
             <remarks>
             <para>
             This delegate defines the signature of a method that gets called
             when an <see cref="T:Vrml.EAI.Field.EventOut">event-out slot</see>
             sends an event. Write a method that has the same signature, add it
             to the <see cref="T:Vrml.EAI.Field.EventOut"/> object
             by calling its <see cref="M:Vrml.EAI.Field.EventOut.AddVrmlEventDelegate(Vrml.EAI.Event.VrmlEventDelegate)"/>
             method, and that method will be called when the slot fires an event. The
             <see cref="T:Vrml.EAI.Event.VrmlEvent"/> object you'll receive as a parameter of
             the method contains more information about the specific event.
             When you're no longer interested in receiving events, remove the delegate
             from the <see cref="T:Vrml.EAI.Field.EventOut"/> object by calling its
             <see cref="M:Vrml.EAI.Field.EventOut.RemoveVrmlEventDelegate(Vrml.EAI.Event.VrmlEventDelegate)"/>
             method.
             </para>
             <para>
             Warning: Something really important that you have to keep in mind
             about vrml event delegates is that they get called by a special thread
             created inside the EAI implementation, not by the main thread of your
             application. For this reason, you have to synchronize access to variables
             and calls to other methods, i.e. you have to make your code thread-safe.
             For more information about thread-safety, read a good book about thread
             programming in C#. The EAI interface itself is thread-safe, therefore you
             do not have to care about thread synchronization when calling EAI methods.
             Also keep in mind that your code inside the delegate should not block - as
             long as the thread is inside your delegate, no other delegate gets called.
             For performance reasons, do not try to do long-winded operations in your
             delegate, instead return as soon as possible. If you need to perform lengthy
             operations, create a new thread to do them.
             </para>
             <para>
             This class is obsolete! Please use <see cref="T:Vrml.EAI.Event.VrmlEventHandler"/> instead.
             </para>
             </remarks>
             <param name="evt">
             A <see cref="T:Vrml.EAI.Event.VrmlEvent"/> object that contains information about the event.
             </param>
             <example>
             The following example shows the skeleton of a VRML event delegate, and
             it demonstrates how to add the delegate to an
             <see cref="T:Vrml.EAI.Field.EventOut"/> object, and how to remove the delegate
             when you're finished:
             <code>
             public class MyClass
             {
                 private static Vrml.EAI.Field.EventOutSFColor diffuseColor_changed;
            
                 private static void OnVrmlEvent(Vrml.EAI.Event.VrmlEvent evt)
                 {
                     Vrml.EAI.Field.BaseField field = evt.Source;
                     double time = evt.Time;
                     object data = evt.Data;
                     if (field == diffuseColor_changed)
                     {
                         // diffuseColor_changed event-out slot fired an event
                         ...
                     }
                     ...
                 }
            
                 public static void Main(string[] args)
                 {
                     ...
                     diffuseColor_changed = ...;
                     diffuseColor_changed.AddVrmlEventDelegate(OnVrmlEvent);
                     ...
                     diffuseColor_changed.RemoveVrmlEventDelegate(OnVrmlEvent);
                     ...
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:Vrml.EAI.Event.VrmlEventHandler">
             <summary>
             Delegate that gets called when an
             <see cref="T:Vrml.EAI.Field.EventOut">event-out slot</see>
             sends an event.
             </summary>
             <remarks>
             <para>
             This delegate defines the signature of a method that gets called
             when an <see cref="T:Vrml.EAI.Field.EventOut">event-out slot</see>
             sends an event. Write a method that has the same signature, add it
             to the <see cref="T:Vrml.EAI.Field.EventOut"/> object
             by adding it to the <see cref="E:Vrml.EAI.Field.EventOut.VrmlEvent"/>
             event, and that method will be called when the slot fires an event. The
             <see cref="T:Vrml.EAI.Event.VrmlEventArgs"/> object you'll receive as a parameter of
             the method contains more information about the specific event.
             When you're no longer interested in receiving events, remove the delegate
             from the <see cref="E:Vrml.EAI.Field.EventOut.VrmlEvent"/> event.
             </para>
             <para>
             Warning: Something really important that you have to keep in mind
             about vrml event delegates is that they get called by a special thread
             created inside the EAI implementation, not by the main thread of your
             application. For this reason, you have to synchronize access to variables
             and calls to other methods, i.e. you have to make your code thread-safe.
             For more information about thread-safety, read a good book about thread
             programming in C#. The EAI interface itself is thread-safe, therefore you
             do not have to care about thread synchronization when calling EAI methods.
             Also keep in mind that your code inside the delegate should not block - as
             long as the thread is inside your delegate, no other delegate gets called.
             For performance reasons, do not try to do long-winded operations in your
             delegate, instead return as soon as possible. If you need to perform lengthy
             operations, create a new thread to do them.
             </para>
             </remarks>
             <param name="sender">
             The <see cref="T:Vrml.EAI.Field.EventOut">event-out slot</see>
             whose value changed.
             </param>
             <param name="e">
             A <see cref="T:Vrml.EAI.Event.VrmlEventArgs"/> object that contains information about the event.
             </param>
             <example>
             The following example shows the skeleton of a VRML event handler, and
             it demonstrates how to add the handler to an
             <see cref="T:Vrml.EAI.Field.EventOut"/> object, and how to remove the handler
             when you're finished:
             <code>
             public class MyClass
             {
                 private static Vrml.EAI.Field.EventOutSFColor diffuseColor_changed;
            
                 private static void OnVrmlEvent(object sender, Vrml.EAI.Event.VrmlEventArgs e)
                 {
                     Vrml.EAI.Field.BaseField field = (Vrml.EAI.Field.BaseField)sender;
                     double time = e.Time;
                     object data = e.Data;
                     if (field == diffuseColor_changed)
                     {
                         // diffuseColor_changed event-out slot fired an event
                         ...
                     }
                     ...
                 }
            
                 public static void Main(string[] args)
                 {
                     ...
                     diffuseColor_changed = ...;
                     diffuseColor_changed.VrmlEvent += OnVrmlEvent;
                     ...
                     diffuseColor_changed.VrmlEvent -= OnVrmlEvent;
                     ...
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:Vrml.EAI.Field.BaseField">
            <summary>
            Abstract ancestor of all VRML fields.
            </summary>
            <remarks>
            This class simply defines the <see cref="P:Vrml.EAI.Field.BaseField.Type"/> property and
            symbolic constants for all values of that property. This is an
            abstract class, i.e. you cannot create instances of this class.
            The only way to retrieve instances of this class are the
            <see cref="M:Vrml.EAI.Node.GetEventIn(System.String)">Node.GetEventIn</see> and
            <see cref="M:Vrml.EAI.Node.GetEventOut(System.String)">Node.GetEventOut</see> methods.
            </remarks>
        </member>
        <member name="F:Vrml.EAI.Field.BaseField.SFBool">
            <summary>
            Symbolic name for the SFBool field type.
            </summary>
            <remarks>
            This is the value of the <see cref="P:Vrml.EAI.Field.BaseField.Type"/> property for
            SFBool fields.
            </remarks>
            <example>
            The following example demonstrates how to check if a field
            is a SFBool field:
            <code>
            Vrml.EAI.Field.BaseField field = ...;
            if (field.Type == Vrml.EAI.Field.BaseField.SFBool)
            {
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Field.BaseField.SFColor">
            <summary>
            Symbolic name for the SFColor field type.
            </summary>
            <remarks>
            This is the value of the <see cref="P:Vrml.EAI.Field.BaseField.Type"/> property for
            SFColor fields.
            </remarks>
            <example>
            The following example demonstrates how to check if a field
            is a SFColor field:
            <code>
            Vrml.EAI.Field.BaseField field = ...;
            if (field.Type == Vrml.EAI.Field.BaseField.SFColor)
            {
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Field.BaseField.SFFloat">
            <summary>
            Symbolic name for the SFFloat field type.
            </summary>
            <remarks>
            This is the value of the <see cref="P:Vrml.EAI.Field.BaseField.Type"/> property for
            SFFloat fields.
            </remarks>
            <example>
            The following example demonstrates how to check if a field
            is a SFFloat field:
            <code>
            Vrml.EAI.Field.BaseField field = ...;
            if (field.Type == Vrml.EAI.Field.BaseField.SFFloat)
            {
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Field.BaseField.SFImage">
            <summary>
            Symbolic name for the SFImage field type.
            </summary>
            <remarks>
            This is the value of the <see cref="P:Vrml.EAI.Field.BaseField.Type"/> property for
            SFImage fields.
            </remarks>
            <example>
            The following example demonstrates how to check if a field
            is a SFImage field:
            <code>
            Vrml.EAI.Field.BaseField field = ...;
            if (field.Type == Vrml.EAI.Field.BaseField.SFImage)
            {
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Field.BaseField.SFInt32">
            <summary>
            Symbolic name for the SFInt32 field type.
            </summary>
            <remarks>
            This is the value of the <see cref="P:Vrml.EAI.Field.BaseField.Type"/> property for
            SFInt32 fields.
            </remarks>
            <example>
            The following example demonstrates how to check if a field
            is a SFInt32 field:
            <code>
            Vrml.EAI.Field.BaseField field = ...;
            if (field.Type == Vrml.EAI.Field.BaseField.SFInt32)
            {
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Field.BaseField.SFNode">
            <summary>
            Symbolic name for the SFNode field type.
            </summary>
            <remarks>
            This is the value of the <see cref="P:Vrml.EAI.Field.BaseField.Type"/> property for
            SFNode fields.
            </remarks>
            <example>
            The following example demonstrates how to check if a field
            is a SFNode field:
            <code>
            Vrml.EAI.Field.BaseField field = ...;
            if (field.Type == Vrml.EAI.Field.BaseField.SFNode)
            {
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Field.BaseField.SFRotation">
            <summary>
            Symbolic name for the SFRotation field type.
            </summary>
            <remarks>
            This is the value of the <see cref="P:Vrml.EAI.Field.BaseField.Type"/> property for
            SFRotation fields.
            </remarks>
            <example>
            The following example demonstrates how to check if a field
            is a SFRotation field:
            <code>
            Vrml.EAI.Field.BaseField field = ...;
            if (field.Type == Vrml.EAI.Field.BaseField.SFRotation)
            {
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Field.BaseField.SFString">
            <summary>
            Symbolic name for the SFString field type.
            </summary>
            <remarks>
            This is the value of the <see cref="P:Vrml.EAI.Field.BaseField.Type"/> property for
            SFString fields.
            </remarks>
            <example>
            The following example demonstrates how to check if a field
            is a SFString field:
            <code>
            Vrml.EAI.Field.BaseField field = ...;
            if (field.Type == Vrml.EAI.Field.BaseField.SFString)
            {
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Field.BaseField.SFTime">
            <summary>
            Symbolic name for the SFTime field type.
            </summary>
            <remarks>
            This is the value of the <see cref="P:Vrml.EAI.Field.BaseField.Type"/> property for
            SFTime fields.
            </remarks>
            <example>
            The following example demonstrates how to check if a field
            is a SFTime field:
            <code>
            Vrml.EAI.Field.BaseField field = ...;
            if (field.Type == Vrml.EAI.Field.BaseField.SFTime)
            {
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Field.BaseField.SFVec2f">
            <summary>
            Symbolic name for the SFVec2f field type.
            </summary>
            <remarks>
            This is the value of the <see cref="P:Vrml.EAI.Field.BaseField.Type"/> property for
            SFVec2f fields.
            </remarks>
            <example>
            The following example demonstrates how to check if a field
            is a SFVec2f field:
            <code>
            Vrml.EAI.Field.BaseField field = ...;
            if (field.Type == Vrml.EAI.Field.BaseField.SFVec2f)
            {
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Field.BaseField.SFVec3f">
            <summary>
            Symbolic name for the SFVec3f field type.
            </summary>
            <remarks>
            This is the value of the <see cref="P:Vrml.EAI.Field.BaseField.Type"/> property for
            SFVec3f fields.
            </remarks>
            <example>
            The following example demonstrates how to check if a field
            is a SFVec3f field:
            <code>
            Vrml.EAI.Field.BaseField field = ...;
            if (field.Type == Vrml.EAI.Field.BaseField.SFVec3f)
            {
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Field.BaseField.MFColor">
            <summary>
            Symbolic name for the MFColor field type.
            </summary>
            <remarks>
            This is the value of the <see cref="P:Vrml.EAI.Field.BaseField.Type"/> property for
            MFColor fields.
            </remarks>
            <example>
            The following example demonstrates how to check if a field
            is a MFColor field:
            <code>
            Vrml.EAI.Field.BaseField field = ...;
            if (field.Type == Vrml.EAI.Field.BaseField.MFColor)
            {
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Field.BaseField.MFFloat">
            <summary>
            Symbolic name for the MFFloat field type.
            </summary>
            <remarks>
            This is the value of the <see cref="P:Vrml.EAI.Field.BaseField.Type"/> property for
            MFFloat fields.
            </remarks>
            <example>
            The following example demonstrates how to check if a field
            is a MFFloat field:
            <code>
            Vrml.EAI.Field.BaseField field = ...;
            if (field.Type == Vrml.EAI.Field.BaseField.MFFloat)
            {
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Field.BaseField.MFInt32">
            <summary>
            Symbolic name for the MFInt32 field type.
            </summary>
            <remarks>
            This is the value of the <see cref="P:Vrml.EAI.Field.BaseField.Type"/> property for
            MFInt32 fields.
            </remarks>
            <example>
            The following example demonstrates how to check if a field
            is a MFInt32 field:
            <code>
            Vrml.EAI.Field.BaseField field = ...;
            if (field.Type == Vrml.EAI.Field.BaseField.MFInt32)
            {
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Field.BaseField.MFNode">
            <summary>
            Symbolic name for the MFNode field type.
            </summary>
            <remarks>
            This is the value of the <see cref="P:Vrml.EAI.Field.BaseField.Type"/> property for
            MFNode fields.
            </remarks>
            <example>
            The following example demonstrates how to check if a field
            is a MFNode field:
            <code>
            Vrml.EAI.Field.BaseField field = ...;
            if (field.Type == Vrml.EAI.Field.BaseField.MFNode)
            {
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Field.BaseField.MFRotation">
            <summary>
            Symbolic name for the MFRotation field type.
            </summary>
            <remarks>
            This is the value of the <see cref="P:Vrml.EAI.Field.BaseField.Type"/> property for
            MFRotation fields.
            </remarks>
            <example>
            The following example demonstrates how to check if a field
            is a MFRotation field:
            <code>
            Vrml.EAI.Field.BaseField field = ...;
            if (field.Type == Vrml.EAI.Field.BaseField.MFRotation)
            {
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Field.BaseField.MFString">
            <summary>
            Symbolic name for the MFString field type.
            </summary>
            <remarks>
            This is the value of the <see cref="P:Vrml.EAI.Field.BaseField.Type"/> property for
            MFString fields.
            </remarks>
            <example>
            The following example demonstrates how to check if a field
            is a MFString field:
            <code>
            Vrml.EAI.Field.BaseField field = ...;
            if (field.Type == Vrml.EAI.Field.BaseField.MFString)
            {
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Field.BaseField.MFTime">
            <summary>
            Symbolic name for the MFTime field type.
            </summary>
            <remarks>
            This is the value of the <see cref="P:Vrml.EAI.Field.BaseField.Type"/> property for
            MFTime fields.
            </remarks>
            <example>
            The following example demonstrates how to check if a field
            is a MFTime field:
            <code>
            Vrml.EAI.Field.BaseField field = ...;
            if (field.Type == Vrml.EAI.Field.BaseField.MFTime)
            {
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Field.BaseField.MFVec2f">
            <summary>
            Symbolic name for the MFVec2f field type.
            </summary>
            <remarks>
            This is the value of the <see cref="P:Vrml.EAI.Field.BaseField.Type"/> property for
            MFVec2f fields.
            </remarks>
            <example>
            The following example demonstrates how to check if a field
            is a MFVec2f field:
            <code>
            Vrml.EAI.Field.BaseField field = ...;
            if (field.Type == Vrml.EAI.Field.BaseField.MFVec2f)
            {
                ...
            }
            </code>
            </example>
        </member>
        <member name="F:Vrml.EAI.Field.BaseField.MFVec3f">
            <summary>
            Symbolic name for the MFVec3f field type.
            </summary>
            <remarks>
            This is the value of the <see cref="P:Vrml.EAI.Field.BaseField.Type"/> property for
            MFVec3f fields.
            </remarks>
            <example>
            The following example demonstrates how to check if a field
            is a MFVec3f field:
            <code>
            Vrml.EAI.Field.BaseField field = ...;
            if (field.Type == Vrml.EAI.Field.BaseField.MFVec3f)
            {
                ...
            }
            </code>
            </example>
        </member>
        <member name="P:Vrml.EAI.Field.BaseField.Type">
            <summary>
            Get the type of field.
            </summary>
            <value>
            A numerical value that specifies the type of this field.
            This value is one of the constants defined in this class.
            </value>
            <example>
            The following example demonstrates how to print the type
            of a field to the console:
            <code>
            Vrml.EAI.Field.BaseField field = ...;
            switch (children.Type)
            {
                case Vrml.EAI.Field.BaseField.SFBool:
                    System.Console.WriteLine("SFBool");
                    break;
                case Vrml.EAI.Field.BaseField.SFColor:
                    System.Console.WriteLine("SFColor");
                    break;
                case Vrml.EAI.Field.BaseField.SFFloat:
                    System.Console.WriteLine("SFFloat");
                    break;
                case Vrml.EAI.Field.BaseField.SFImage:
                    System.Console.WriteLine("SFImage");
                    break;
                case Vrml.EAI.Field.BaseField.SFInt32:
                    System.Console.WriteLine("SFInt32");
                    break;
                case Vrml.EAI.Field.BaseField.SFNode:
                    System.Console.WriteLine("SFNode");
                    break;
                case Vrml.EAI.Field.BaseField.SFRotation:
                    System.Console.WriteLine("SFRotation");
                    break;
                case Vrml.EAI.Field.BaseField.SFString:
                    System.Console.WriteLine("SFString");
                    break;
                case Vrml.EAI.Field.BaseField.SFTime:
                    System.Console.WriteLine("SFTime");
                    break;
                case Vrml.EAI.Field.BaseField.SFVec2f:
                    System.Console.WriteLine("SFVec2f");
                    break;
                case Vrml.EAI.Field.BaseField.SFVec3f:
                    System.Console.WriteLine("SFVec3f");
                    break;
                case Vrml.EAI.Field.BaseField.MFColor:
                    System.Console.WriteLine("MFColor");
                    break;
                case Vrml.EAI.Field.BaseField.MFFloat:
                    System.Console.WriteLine("MFFloat");
                    break;
                case Vrml.EAI.Field.BaseField.MFInt32:
                    System.Console.WriteLine("MFInt32");
                    break;
                case Vrml.EAI.Field.BaseField.MFNode:
                    System.Console.WriteLine("MFNode");
                    break;
                case Vrml.EAI.Field.BaseField.MFRotation:
                    System.Console.WriteLine("MFRotation");
                    break;
                case Vrml.EAI.Field.BaseField.MFString:
                    System.Console.WriteLine("MFString");
                    break;
                case Vrml.EAI.Field.BaseField.MFTime:
                    System.Console.WriteLine("MFTime");
                    break;
                case Vrml.EAI.Field.BaseField.MFVec2f:
                    System.Console.WriteLine("MFVec2f");
                    break;
                case Vrml.EAI.Field.BaseField.MFVec3f:
                    System.Console.WriteLine("MFVec3f");
                    break;
            }
            </code>
            </example>
        </member>
        <member name="T:Vrml.EAI.Field.EventIn">
            <summary>
            Abstract ancestor of all event-in slots.
            </summary>
            <remarks>
            This class simply defines the <see cref="P:Vrml.EAI.Field.EventIn.UserData"/> property
            that allows to attach arbitrary application-specific data to
            event-in slots. This is an abstract class, i.e. you cannot
            create instances of this class. The only way to retrieve
            instances of this class is the
            <see cref="M:Vrml.EAI.Node.GetEventIn(System.String)">Node.GetEventIn</see> method.
            Usually you do not use this class directly, but cast it to one
            of its descendants for the respective VRML data types.
            </remarks>
            <example>
            The following example demonstrates how to get a reference
            to the "addChildren" event-in slot of a "Group" node:
            <code>
            Vrml.EAI.Node group = browser.GetNode(...);
            Vrml.EAI.Field.EventInMFNode addChildren = (Vrml.EAI.Field.EventInMFNode)group.GetEventIn("addChildren");
            </code>
            </example>
        </member>
        <member name="P:Vrml.EAI.Field.EventIn.UserData">
            <summary>
            Gets or sets the user data associated with this field.
            </summary>
            <value>An arbitrary data object.</value>
            <remarks>
            The user data is not used by the EAI in any way. It is
            a simple way to attach arbitrary application-specific
            data to event-in slots.
            </remarks>
            <example>
            The following example demonstrates how to attach a data
            object ("myData") to an event-in slot:
            <code>
            MyClass myData = ...;
            Vrml.EAI.Field.EventIn eventIn = ...;
            eventIn.UserData = myData;
            ...
            myData = eventIn.UserData;
            </code>
            </example>
        </member>
        <member name="T:Vrml.EAI.Field.EventInMFColor">
            <summary>
            Reference to a MFColor event-in slot.
            </summary>
            <remarks>
            Use this class to write values into MFColor event-in slots.
            </remarks>
            <example>
            The following example demonstrates how to write three
            colors (red, green and blue) into the "color" field of a Color
            node:
            <code>
            Vrml.EAI.Node color = ...;
            Vrml.EAI.Field.EventInMFColor set_color = (Vrml.EAI.Field.EventInMFColor)color.GetEventIn("set_color");
            float[][] c = new float[3][];
            c[0] = new float[] { 1.0f, 0.0f, 0.0f }; // red color
            c[1] = new float[] { 0.0f, 1.0f, 0.0f }; // green color
            c[2] = new float[] { 0.0f, 0.0f, 1.0f }; // blue color
            set_color.SetValue(c);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFColor.SetValue(System.Single[][])">
            <summary>
            Sets the elements of the MFColor event-in slot.
            </summary>
            <param name="value">
            The new color values. This is an array of float arrays that
            contain at least three values. The first value is the red
            component of the color, the second value the green component,
            and the third value the blue component. Each component must
            be between 0 and 1, inclusively. 0 means no intensity, and 1
            means full intensity.
            </param>
            <example>
            The following example demonstrates how to write three
            colors (red, green and blue) into the "color" field of a Color
            node:
            <code>
            Vrml.EAI.Node color = ...;
            Vrml.EAI.Field.EventInMFColor set_color = (Vrml.EAI.Field.EventInMFColor)color.GetEventIn("set_color");
            float[][] c = new float[3][];
            c[0] = new float[] { 1.0f, 0.0f, 0.0f }; // red color
            c[1] = new float[] { 0.0f, 1.0f, 0.0f }; // green color
            c[2] = new float[] { 0.0f, 0.0f, 1.0f }; // blue color
            set_color.SetValue(c);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFColor.Set1Value(System.Int32,System.Single[])">
            <summary>
            Sets one element of the MFColor event-in slot.
            </summary>
            <param name="index">
            The index of the element, starting at 0.
            </param>
            <param name="value">The new color value. This is an array of
            at least three float values. The first value is the red component
            of the color, the second value the green component, and the third value
            the blue component. Each component must be between 0 and 1, inclusively.
            0 means no intensity, and 1 means full intensity.</param>
            <example>
            The following example demonstrates how to write a
            color (red) into the first element of the "color" field of a Color
            node:
            <code>
            Vrml.EAI.Node color = ...;
            Vrml.EAI.Field.EventInMFColor set_color = (Vrml.EAI.Field.EventInMFColor)color.GetEventIn("set_color");
            float[] c = new float[] { 1.0f, 0.0f, 0.0f }; // red color
            set_color.Set1Value(0, c);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFColor.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventIn(System.String)">Node.GetEventIn</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventInMFFloat">
            <summary>
            Reference to a MFFloat event-in slot.
            </summary>
            <remarks>
            Use this class to write values into MFFloat event-in slots.
            </remarks>
            <example>
            The following example demonstrates how to write three
            float values (0, 0.5 and 1) into the "key" field of a
            CoordinateInterpolator node:
            <code>
            Vrml.EAI.Node coordinateInterpolator = ...;
            Vrml.EAI.Field.EventInMFFloat set_key = (Vrml.EAI.Field.EventInMFFloat)coordinateInterpolator.GetEventIn("set_key");
            set_key.SetValue(new float[] { 0.0f, 0.5f, 1.0f });
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFFloat.SetValue(System.Single[])">
            <summary>
            Sets the elements of the MFFloat event-in slot.
            </summary>
            <param name="value">The new float values</param>
            <example>
            The following example demonstrates how to write three
            float values (0, 0.5 and 1) into the "key" field of a
            CoordinateInterpolator node:
            <code>
            Vrml.EAI.Node coordinateInterpolator = ...;
            Vrml.EAI.Field.EventInMFFloat set_key = (Vrml.EAI.Field.EventInMFFloat)coordinateInterpolator.GetEventIn("set_key");
            set_key.SetValue(new float[] { 0.0f, 0.5f, 1.0f });
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFFloat.Set1Value(System.Int32,System.Single)">
            <summary>
            Sets one element of the MFFloat event-in slot.
            </summary>
            <param name="index">
            The index of the element, starting at 0.
            </param>
            <param name="value">The new float value.</param>
            <example>
            The following example demonstrates how to write a float
            value (0.5) into the first element of the "key" field of a
            CoordinateInterpolator node:
            <code>
            Vrml.EAI.Node coordinateInterpolator = ...;
            Vrml.EAI.Field.EventInMFFloat set_key = (Vrml.EAI.Field.EventInMFFloat)coordinateInterpolator.GetEventIn("set_key");
            set_key.Set1Value(0, 0.5f);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFFloat.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventIn(System.String)">Node.GetEventIn</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventInMFInt32">
            <summary>
            Reference to a MFInt32 event-in slot.
            </summary>
            <remarks>
            Use this class to write values into MFInt32 event-in slots.
            </remarks>
            <example>
            The following example demonstrates how to write three
            integer values (0, 1 and 2) into the "colorIndex" field of an
            IndexedFaceSet node:
            <code>
            Vrml.EAI.Node indexedFaceSet = ...;
            Vrml.EAI.Field.EventInMFInt32 set_colorIndex = (Vrml.EAI.Field.EventInMFInt32)indexedFaceSet.GetEventIn("set_colorIndex");
            set_colorIndex.SetValue(new int[] { 0, 1, 2 });
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFInt32.SetValue(System.Int32[])">
            <summary>
            Sets the elements of the MFInt32 event-in slot.
            </summary>
            <param name="value">The new integer values.</param>
            <example>
            The following example demonstrates how to write three
            integer values (0, 1 and 2) into the "colorIndex" field of an
            IndexedFaceSet node:
            <code>
            Vrml.EAI.Node indexedFaceSet = ...;
            Vrml.EAI.Field.EventInMFInt32 set_colorIndex = (Vrml.EAI.Field.EventInMFInt32)indexedFaceSet.GetEventIn("set_colorIndex");
            set_colorIndex.SetValue(new int[] { 0, 1, 2 });
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFInt32.Set1Value(System.Int32,System.Int32)">
            <summary>
            Sets one element of the MFInt32 event-in slot.
            </summary>
            <param name="index">
            The index of the element, starting at 0.
            </param>
            <param name="value">The new integer value.</param>
            <example>
            The following example demonstrates how to write an integer
            value (2) into the first element of the "colorIndex" field of an
            IndexedFaceSet node:
            <code>
            Vrml.EAI.Node indexedFaceSet = ...;
            Vrml.EAI.Field.EventInMFInt32 set_colorIndex = (Vrml.EAI.Field.EventInMFInt32)indexedFaceSet.GetEventIn("set_colorIndex");
            set_colorIndex.Set1Value(0, 2);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFInt32.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventIn(System.String)">Node.GetEventIn</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventInMFNode">
            <summary>
            Reference to a MFNode event-in slot.
            </summary>
            <remarks>
            Use this class to write values into MFNode event-in slots.
            </remarks>
            <example>
            The following example demonstrates how to add two geometric
            objects (a box and a sphere) to a Group node:
            <code>
            Vrml.EAI.Node group = ...;
            Vrml.EAI.Field.EventInMFNode addChildren = (Vrml.EAI.Field.EventInMFNode)group.GetEventIn("addChildren");
            string vrmlCode =
                "Transform {\n" +
                "  translation -2 0 0\n" +
                "  children [\n" +
                "    Shape {\n" +
                "      appearance Appearance {\n" +
                "        material Material {}\n" +
                "      }\n" +
                "      geometry Box {}\n" +
                "    }\n" +
                "  ]\n" +
                "}\n" +
                "Transform {\n" +
                "  translation 2 0 0\n" +
                "  children [\n" +
                "    Shape {\n" +
                "      appearance Appearance {\n" +
                "        material Material {}\n" +
                "      }\n" +
                "      geometry Sphere {}\n" +
                "    }\n" +
                "  ]\n" +
                "}\n";
            Vrml.EAI.Node[] nodes = browser.CreateVrmlFromString(vrmlCode);
            addChildren.SetValue(nodes);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFNode.SetValue(Vrml.EAI.Node[])">
            <summary>
            Sets the elements of the MFNode event-in slot.
            </summary>
            <param name="value">The new nodes.</param>
            <example>
            The following example demonstrates how to add two geometric
            objects (a box and a sphere) to a Group node:
            <code>
            Vrml.EAI.Node group = ...;
            Vrml.EAI.Field.EventInMFNode addChildren = (Vrml.EAI.Field.EventInMFNode)group.GetEventIn("addChildren");
            string vrmlCode =
                "Transform {\n" +
                "  translation -2 0 0\n" +
                "  children [\n" +
                "    Shape {\n" +
                "      appearance Appearance {\n" +
                "        material Material {}\n" +
                "      }\n" +
                "      geometry Box {}\n" +
                "    }\n" +
                "  ]\n" +
                "}\n" +
                "Transform {\n" +
                "  translation 2 0 0\n" +
                "  children [\n" +
                "    Shape {\n" +
                "      appearance Appearance {\n" +
                "        material Material {}\n" +
                "      }\n" +
                "      geometry Sphere {}\n" +
                "    }\n" +
                "  ]\n" +
                "}\n";
            Vrml.EAI.Node[] nodes = browser.CreateVrmlFromString(vrmlCode);
            addChildren.SetValue(nodes);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFNode.Set1Value(System.Int32,Vrml.EAI.Node)">
            <summary>
            Sets one element of the MFNode event-in slot.
            </summary>
            <param name="index">The index of the element, starting at 0</param>
            <param name="value">The new node.</param>
            <example>
            The following example demonstrates how to replace the first child of
            a Group node by a Shape node:
            <code>
            Vrml.EAI.Node group = ...;
            Vrml.EAI.Field.EventInMFNode set_children = (Vrml.EAI.Field.EventInMFNode)group.GetEventIn("set_children");
            string vrmlCode =
                "Shape {\n" +
                "  appearance Appearance {\n" +
                "    material Material {}\n" +
                "  }\n" +
                "  geometry Box {}\n" +
                "}\n";
            Vrml.EAI.Node[] nodes = browser.CreateVrmlFromString(vrmlCode);
            set_children.Set1Value(0, nodes[0]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFNode.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventIn(System.String)">Node.GetEventIn</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventInMFRotation">
            <summary>
            Reference to a MFRotation event-in slot.
            </summary>
            <remarks>
            Use this class to write values into MFRotation event-in slots.
            </remarks>
            <example>
            The following example demonstrates how to write five
            rotations into the "keyValue" field of an OrientationInterpolator
            node:
            <code>
            Vrml.EAI.Node orientationInterpolator = ...;
            Vrml.EAI.Field.EventInMFRotation set_keyValue = (Vrml.EAI.Field.EventInMFRotation)orientationInterpolator.GetEventIn("set_keyValue");
            float[][] r = new float[5][];
            r[0] = new float[] { 0.0f, 1.0f, 0.0f, 0.0f    }; // no rotation
            r[1] = new float[] { 0.0f, 1.0f, 0.0f, 1.5708f }; // 90 degrees around the y axis
            r[2] = new float[] { 0.0f, 1.0f, 0.0f, 3.1416f }; // 180 degrees around the y axis
            r[3] = new float[] { 0.0f, 1.0f, 0.0f, 4.7124f }; // 270 degress around the y axis
            r[4] = new float[] { 0.0f, 1.0f, 0.0f, 0.0f    }; // no rotation
            set_keyValue.SetValue(r);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFRotation.SetValue(System.Single[][])">
            <summary>
            Sets the elements of the MFRotation event-in slot.
            </summary>
            <param name="value">
            The new rotation values. This is an array of float arrays that
            contain at least four values. The first value is the x component
            of the rotation axis, the second value the y component, the
            third value the z component, and the fourth value the rotation
            angle in radians.
            </param>
            <example>
            The following example demonstrates how to write five
            rotations into the "keyValue" field of an OrientationInterpolator
            node:
            <code>
            Vrml.EAI.Node orientationInterpolator = ...;
            Vrml.EAI.Field.EventInMFRotation set_keyValue = (Vrml.EAI.Field.EventInMFRotation)orientationInterpolator.GetEventIn("set_keyValue");
            float[][] r = new float[5][];
            r[0] = new float[] { 0.0f, 1.0f, 0.0f, 0.0f    }; // no rotation
            r[1] = new float[] { 0.0f, 1.0f, 0.0f, 1.5708f }; // 90 degrees around the y axis
            r[2] = new float[] { 0.0f, 1.0f, 0.0f, 3.1416f }; // 180 degrees around the y axis
            r[3] = new float[] { 0.0f, 1.0f, 0.0f, 4.7124f }; // 270 degress around the y axis
            r[4] = new float[] { 0.0f, 1.0f, 0.0f, 0.0f    }; // no rotation
            set_keyValue.SetValue(r);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFRotation.Set1Value(System.Int32,System.Single[])">
            <summary>
            Sets one element of the MFRotation event-in slot.
            </summary>
            <param name="index">The index of the element, starting at 0</param>
            <param name="value">The new rotation value. This is an array of
            at least four float values. The first value is the x component
            of the rotation axis, the second value the y component, the third value
            the z component, and the fourth value the rotation angle in radians.
            </param>
            <example>
            The following example demonstrates how to write a rotation
            into the first element of the "keyValue" field of an OrientationInterpolator
            node:
            <code>
            Vrml.EAI.Node orientationInterpolator = ...;
            Vrml.EAI.Field.EventInMFRotation set_keyValue = (Vrml.EAI.Field.EventInMFRotation)orientationInterpolator.GetEventIn("set_keyValue");
            float[] r = new float[] { 0.0f, 1.0f, 0.0f, 0.0f }; // no rotation
            set_keyValue.Set1Value(0, r);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFRotation.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventIn(System.String)">Node.GetEventIn</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventInMFString">
            <summary>
            Reference to a MFString event-in slot.
            </summary>
            <remarks>
            Use this class to write values into MFString event-in slots.
            </remarks>
            <example>
            The following example demonstrates how to set the text lines
            displayed by a Text node:
            <code>
            Vrml.EAI.Node text = ...;
            Vrml.EAI.Field.EventInMFString set_string = (Vrml.EAI.Field.EventInMFString)text.GetEventIn("set_string");
            string[] lines = new string[]
            {
                "Hello World!",
                "This is your X3D browser speaking."
            };
            set_string.SetValue(lines);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFString.SetValue(System.String[])">
            <summary>
            Sets the elements of the MFString event-in slot.
            </summary>
            <param name="value">The new string values.</param>
            <example>
            The following example demonstrates how to set the text lines
            displayed by a Text node:
            <code>
            Vrml.EAI.Node text = ...;
            Vrml.EAI.Field.EventInMFString set_string = (Vrml.EAI.Field.EventInMFString)text.GetEventIn("set_string");
            string[] lines = new string[]
            {
                "Hello World!",
                "This is your X3D browser speaking."
            };
            set_string.SetValue(lines);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFString.Set1Value(System.Int32,System.String)">
            <summary>
            Sets one element of the MFString event-in slot.
            </summary>
            <param name="index">The index of the element, starting at 0</param>
            <param name="value">The new string value.</param>
            <example>
            The following example demonstrates how to replace the first line
            displayed by a Text node:
            <code>
            Vrml.EAI.Node text = ...;
            Vrml.EAI.Field.EventInMFString set_string = (Vrml.EAI.Field.EventInMFString)text.GetEventIn("set_string");
            set_string.Set1Value(0, "New first line");
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFString.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventIn(System.String)">Node.GetEventIn</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventInMFTime">
            <summary>
            Reference to a MFTime event-in slot.
            </summary>
            <remarks>
            Use this class to write values into MFTime event-in slots.
            </remarks>
            <example>
            The following example demonstrates how to write two
            timestamps into a "set_timestamps" field of a
            Script node:
            <code>
            Vrml.EAI.Node script = ...;
            Vrml.EAI.Field.EventInMFTime set_timestamps = (Vrml.EAI.Field.EventInMFTime)script.GetEventIn("set_timestamps");
            System.DateTime baseTime = new System.DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
            System.TimeSpan deltaTime = System.DateTime.UtcNow.Subtract(baseTime);
            double currentTime = deltaTime.TotalSeconds;
            set_timestamps.SetValue(new double[] { currentTime + 5.0, currentTime + 10.0 });
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFTime.SetValue(System.Double[])">
            <summary>
            Sets the elements of the MFTime event-in slot.
            </summary>
            <param name="value">
            The new time values. These are double values containing
            the number of seconds since January the 1st, 1970,
            00:00:00 GMT.
            </param>
            <example>
            The following example demonstrates how to write two
            timestamps into a "set_timestamps" field of a
            Script node:
            <code>
            Vrml.EAI.Node script = ...;
            Vrml.EAI.Field.EventInMFTime set_timestamps = (Vrml.EAI.Field.EventInMFTime)script.GetEventIn("set_timestamps");
            System.DateTime baseTime = new System.DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
            System.TimeSpan deltaTime = System.DateTime.UtcNow.Subtract(baseTime);
            double currentTime = deltaTime.TotalSeconds;
            set_timestamps.SetValue(new double[] { currentTime + 5.0, currentTime + 10.0 });
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFTime.Set1Value(System.Int32,System.Double)">
            <summary>
            Sets one element of the MFTime event-in slot.
            </summary>
            <param name="index">The index of the element, starting at 0.</param>
            <param name="value">
            The new time value. This is a double value containing the
            number of seconds since January the 1st, 1970, 00:00:00 GMT.
            </param>
            <example>
            The following example demonstrates how to write a
            timestamp into the first element of a "set_timestamps" field of a
            Script node:
            <code>
            Vrml.EAI.Node script = ...;
            Vrml.EAI.Field.EventInMFTime set_timestamps = (Vrml.EAI.Field.EventInMFTime)script.GetEventIn("set_timestamps");
            System.DateTime baseTime = new System.DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
            System.TimeSpan deltaTime = System.DateTime.UtcNow.Subtract(baseTime);
            double currentTime = deltaTime.TotalSeconds;
            set_timestamps.Set1Value(0, currentTime);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFTime.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventIn(System.String)">Node.GetEventIn</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventInMFVec2f">
            <summary>
            Reference to a MFVec2f event-in slot.
            </summary>
            <remarks>
            Use this class to write values into MFVec2f event-in slots.
            </remarks>
            <example>
            The following example demonstrates how to write three
            texture coordinate values into the "point" field of a
            TextureCoordinate node:
            <code>
            Vrml.EAI.Node textureCoordinate = ...;
            Vrml.EAI.Field.EventInMFVec2f set_point = (Vrml.EAI.Field.EventInMFVec2f)textureCoordinate.GetEventIn("set_point");
            float[][] v = new float[3][];
            v[0] = new float[] { 0.0f, 0.0f }; // lower left
            v[1] = new float[] { 1.0f, 0.0f }; // lower right
            v[2] = new float[] { 0.5f, 1.0f }; // top center
            set_point.SetValue(v);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFVec2f.SetValue(System.Single[][])">
            <summary>
            Sets the elements of the MFVec2f event-in slot.
            </summary>
            <param name="value">
            The new vector values. This is an array of float arrays that
            contain at least two values. The first value is the x component
            of the vector, and the second value the y component.
            </param>
            <example>
            The following example demonstrates how to write three
            texture coordinate values into the "point" field of a
            TextureCoordinate node:
            <code>
            Vrml.EAI.Node textureCoordinate = ...;
            Vrml.EAI.Field.EventInMFVec2f set_point = (Vrml.EAI.Field.EventInMFVec2f)textureCoordinate.GetEventIn("set_point");
            float[][] v = new float[3][];
            v[0] = new float[] { 0.0f, 0.0f }; // lower left
            v[1] = new float[] { 1.0f, 0.0f }; // lower right
            v[2] = new float[] { 0.5f, 1.0f }; // top center
            set_point.SetValue(v);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFVec2f.Set1Value(System.Int32,System.Single[])">
            <summary>
            Sets one element of the MFVec2f event-in slot.
            </summary>
            <param name="index">The index of the element, starting at 0</param>
            <param name="value">The new vector value. This is an array of
            at least two float values. The first value is the x component
            of the vector, and the second value the y component.
            </param>
            <example>
            The following example demonstrates how to write a
            texture coordinate value into the first element of
            the "point" field of a TextureCoordinate node:
            <code>
            Vrml.EAI.Node textureCoordinate = ...;
            Vrml.EAI.Field.EventInMFVec2f set_point = (Vrml.EAI.Field.EventInMFVec2f)textureCoordinate.GetEventIn("set_point");
            float[] v = new float[] { 0.0f, 0.0f };
            set_point.Set1Value(0, v);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFVec2f.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventIn(System.String)">Node.GetEventIn</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventInMFVec3f">
            <summary>
            Reference to a MFVec3f event-in slot.
            </summary>
            <remarks>
            Use this class to write values into MFVec3f event-in slots.
            </remarks>
            <example>
            The following example demonstrates how to write three
            position values into the "point" field of a Coordinate
            node:
            <code>
            Vrml.EAI.Node coordinate = ...;
            Vrml.EAI.Field.EventInMFVec3f set_point = (Vrml.EAI.Field.EventInMFVec3f)coordinate.GetEventIn("set_point");
            float[][] v = new float[3][];
            v[0] = new float[] { -1.0f, -1.0f, 0.0f }; // lower left
            v[1] = new float[] {  1.0f, -1.0f, 0.0f }; // lower right
            v[2] = new float[] {  0.0f,  1.0f, 0.0f }; // top center
            set_point.SetValue(v);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFVec3f.SetValue(System.Single[][])">
            <summary>
            Sets the elements of the MFVec3f event-in slot.
            </summary>
            <param name="value">
            The new vector values. This is an array of float arrays that
            contain at least three values. The first value is the x component
            of the vector, the second value the y component, and the third
            value the z component.
            </param>
            <example>
            The following example demonstrates how to write three
            position values into the "point" field of a Coordinate
            node:
            <code>
            Vrml.EAI.Node coordinate = ...;
            Vrml.EAI.Field.EventInMFVec3f set_point = (Vrml.EAI.Field.EventInMFVec3f)coordinate.GetEventIn("set_point");
            float[][] v = new float[3][];
            v[0] = new float[] { -1.0f, -1.0f, 0.0f }; // lower left
            v[1] = new float[] {  1.0f, -1.0f, 0.0f }; // lower right
            v[2] = new float[] {  0.0f,  1.0f, 0.0f }; // top center
            set_point.SetValue(v);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFVec3f.Set1Value(System.Int32,System.Single[])">
            <summary>
            Sets one element of the MFVec3f event-in slot.
            </summary>
            <param name="index">The index of the element, starting at 0</param>
            <param name="value">The new vector value. This is an array of
            at least three float values. The first value is the x component
            of the vector, the second value the y component, and the third value
            the z component.
            </param>
            <example>
            The following example demonstrates how to write a new
            position value into the first element of the "point" field of a
            Coordinate node:
            <code>
            Vrml.EAI.Node coordinate = ...;
            Vrml.EAI.Field.EventInMFVec3f set_point = (Vrml.EAI.Field.EventInMFVec3f)coordinate.GetEventIn("set_point");
            float[] v = new float[] { -1.0f, -1.0f, 0.0f };
            set_point.Set1Value(0, v);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInMFVec3f.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventIn(System.String)">Node.GetEventIn</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventInSFBool">
            <summary>
            Reference to a SFBool event-in slot.
            </summary>
            <remarks>
            Use this class to write values into SFBool event-in slots.
            </remarks>
            <example>
            The following example demonstrates how to bind a
            Viewpoint:
            <code>
            Vrml.EAI.Node viewpoint = ...;
            Vrml.EAI.Field.EventInSFBool set_bind = (Vrml.EAI.Field.EventInSFBool)viewpoint.GetEventIn("set_bind");
            set_bind.SetValue(true);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInSFBool.SetValue(System.Boolean)">
            <summary>
            Sets the value of the SFBool event-in slot.
            </summary>
            <param name="value">The new boolean value.</param>
            <example>
            The following example demonstrates how to bind a
            Viewpoint:
            <code>
            Vrml.EAI.Node viewpoint = ...;
            Vrml.EAI.Field.EventInSFBool set_bind = (Vrml.EAI.Field.EventInSFBool)viewpoint.GetEventIn("set_bind");
            set_bind.SetValue(true);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInSFBool.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventIn(System.String)">Node.GetEventIn</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventInSFColor">
            <summary>
            Reference to a SFColor event-in slot.
            </summary>
            <remarks>
            Use this class to write values into SFColor event-in slots.
            </remarks>
            <example>
            The following example demonstrates how to set the diffuseColor
            field of a Material node to red:
            <code>
            Vrml.EAI.Node material = ...;
            Vrml.EAI.Field.EventInSFColor set_diffuseColor = (Vrml.EAI.Field.EventInSFColor)material.GetEventIn("set_diffuseColor");
            float red_component = 1.0f;
            float green_component = 0.0f;
            float blue_component = 0.0f;
            float[] color = new float[] { red_component, green_component, blue_component };
            set_diffuseColor.SetValue(color);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInSFColor.SetValue(System.Single[])">
            <summary>
            Sets the value of the SFColor event-in slot.
            </summary>
            <param name="value">
            The new color value. This is an array of at least three
            float values. The first value is the red color component,
            the second the green, and the third the blue. Each
            component must be between 0 (no intensity) and 1
            (full intensity), inclusively.
            </param>
            <example>
            The following example demonstrates how to set the diffuseColor
            field of a Material node to red:
            <code>
            Vrml.EAI.Node material = ...;
            Vrml.EAI.Field.EventInSFColor set_diffuseColor = (Vrml.EAI.Field.EventInSFColor)material.GetEventIn("set_diffuseColor");
            float red_component = 1.0f;
            float green_component = 0.0f;
            float blue_component = 0.0f;
            float[] color = new float[] { red_component, green_component, blue_component };
            set_diffuseColor.SetValue(color);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInSFColor.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventIn(System.String)">Node.GetEventIn</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventInSFFloat">
            <summary>
            Reference to a SFFloat event-in slot.
            </summary>
            <remarks>
            Use this class to write values into SFFloat event-in slots.
            </remarks>
            <example>
            The following example demonstrates how to send a
            new fraction value to a PositionInterpolator node:
            <code>
            Vrml.EAI.Node positionInterpolator = ...;
            Vrml.EAI.Field.EventInSFFloat set_fraction = (Vrml.EAI.Field.EventInSFFloat)positionInterpolator.GetEventIn("set_fraction");
            set_fraction.SetValue(0.5f);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInSFFloat.SetValue(System.Single)">
            <summary>
            Sets the value of the SFFloat event-in slot.
            </summary>
            <param name="value">The new float value.</param>
            <example>
            The following example demonstrates how to send a
            new fraction value to a PositionInterpolator node:
            <code>
            Vrml.EAI.Node positionInterpolator = ...;
            Vrml.EAI.Field.EventInSFFloat set_fraction = (Vrml.EAI.Field.EventInSFFloat)positionInterpolator.GetEventIn("set_fraction");
            set_fraction.SetValue(0.5f);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInSFFloat.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventIn(System.String)">Node.GetEventIn</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventInSFImage">
            <summary>
            Reference to a SFImage event-in slot.
            </summary>
            <remarks>
            Use this class to write values into SFImage event-in slots.
            </remarks>
            <example>
            The following example demonstrates how to put a new texture
            into a PixelTexture node. The texture has a size of 2 x 2 pixels and
            RGB color values (3 components). The lower left pixel is white, the
            lower right pixel red, the upper left pixel green, and the upper right
            pixel blue:
            <code>
            Vrml.EAI.Node pixelTexture = ...;
            Vrml.EAI.Field.EventInSFImage set_image = (Vrml.EAI.Field.EventInSFImage)pixelTexture.GetEventIn("set_image");
            int [] pixels = new int[] { 0xFFFFFF, 0xFF0000, 0x00FF00, 0x0000FF };
            set_image.SetValue(2, 2, 3, pixels);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInSFImage.SetValue(System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Sets the value of the SFImage event-in slot.
            </summary>
            <param name="width">The width of the image, in pixels.</param>
            <param name="height">The height of the image, in pixels.</param>
            <param name="components">
            The number of color components per pixel. This value must be
            between 1 and 4, inclusively. Greyscale images have 1 component
            (intensity). Greyscale images with an alpha channel have 2 components
            (intensity and alpha). Color images have 3 components (red, green and
            blue). Color images with an alpha channel have 4 components (red,
            green, blue and alpha).
            </param>
            <param name="pixels">
            The actual pixel values. These are at least width x height integer values.
            The pixels are defined left to right, bottom to top, i.e. the first
            pixel is in the lower left corner, and the last pixel is in the upper
            right corner of the image. Each color component must be between 0
            (no intensity resp. completely transparent) and 255 (full intensity
            resp. completely opaque), inclusively. For one-component images, pixels
            simply consist of a single intensity value, e.g. 0x00 in hexadecimal
            (0 in decimal) for no intensity or 0xff in hexadecimal (256 in decimal)
            for full intensity. For two-component images, pixels consist of an
            intensity value in the upper byte, followed by an alpha value in the
            lower byte, e.g. 0xff80 is semi-transparent full intensity. When you
            have an intensity value and an alpha value, you can calculate the
            resulting pixel like this: <c>pixel = (intensity &lt;&lt; 8) | alpha</c>.
            For three-component images, pixels consist of the red component in the
            highest byte, followed by green and finally blue in the lowest byte,
            e.g. 0xFF0000 is red, 0x00FF00 is green, and 0x0000FF is blue. When
            you have the red, green and blue value, you can calculate the resulting
            pixel like this: <c>pixel = (red &lt;&lt; 16) | (green &lt;&lt; 8) | blue</c>.
            For four-component images, pixels consist of the red component in the
            highest byte, followed by green, blue and finally alpha in the lowest
            byte, e.g. 0xff000080 is semi-transparent red. When you have the red,
            green, blue and alpha values, you can calculate the resulting pixel like
            this: <c>pixel = (red &lt;&lt; 24) | (green &lt;&lt; 16) | (blue &lt;&lt; 8) | alpha</c>.
            </param>
            <example>
            The following example demonstrates how to put a new texture
            into a PixelTexture node. The texture has a size of 2 x 2 pixels and
            RGB color values (3 components). The lower left pixel is white, the
            lower right pixel red, the upper left pixel green, and the upper right
            pixel blue:
            <code>
            Vrml.EAI.Node pixelTexture = ...;
            Vrml.EAI.Field.EventInSFImage set_image = (Vrml.EAI.Field.EventInSFImage)pixelTexture.GetEventIn("set_image");
            int [] pixels = new int[] { 0xFFFFFF, 0xFF0000, 0x00FF00, 0x0000FF };
            set_image.SetValue(2, 2, 3, pixels);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInSFImage.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventIn(System.String)">Node.GetEventIn</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventInSFInt32">
            <summary>
            Reference to a SFInt32 event-in slot.
            </summary>
            <remarks>
            Use this class to write values into SFInt32 event-in slots.
            </remarks>
            <example>
            The following example demonstrates how to switch between
            different geometries under a Switch node:
            <code>
            Vrml.EAI.Node switchNode = ...;
            Vrml.EAI.Field.EventInSFInt32 set_whichChoice = (Vrml.EAI.Field.EventInSFInt32)switchNode.GetEventIn("set_whichChoice");
            set_whichChoice.SetValue(2);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInSFInt32.SetValue(System.Int32)">
            <summary>
            Sets the value of a SFInt32 event-in slot.
            </summary>
            <param name="value">The new integer value.</param>
            <example>
            The following example demonstrates how to switch between
            different geometries under a Switch node:
            <code>
            Vrml.EAI.Node switchNode = ...;
            Vrml.EAI.Field.EventInSFInt32 set_whichChoice = (Vrml.EAI.Field.EventInSFInt32)switchNode.GetEventIn("set_whichChoice");
            set_whichChoice.SetValue(2);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInSFInt32.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventIn(System.String)">Node.GetEventIn</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventInSFNode">
            <summary>
            Reference to a SFNode event-in slot.
            </summary>
            <remarks>
            Use this class to write values into SFNode event-in slots.
            </remarks>
            <example>
            The following example demonstrates how to create
            a box geometry and put it into a shape node:
            <code>
            Vrml.EAI.Browser browser = ...;
            Vrml.EAI.Node shapeNode = ...;
            Vrml.EAI.Node boxNode = browser.CreateVrmlFromString("Box {}")[0];
            Vrml.EAI.Field.EventInSFNode set_geometry = (Vrml.EAI.Field.EventInSFNode)shapeNode.GetEventIn("set_geometry");
            set_geometry.SetValue(boxNode);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInSFNode.SetValue(Vrml.EAI.Node)">
            <summary>
            Sets the new value of a SFNode event-in slot.
            </summary>
            <param name="value">
            The new node. Use <c>null</c> to remove a node from
            a field.
            </param>
            <example>
            The following example demonstrates how to create
            a box geometry and put it into a shape node:
            <code>
            Vrml.EAI.Browser browser = ...;
            Vrml.EAI.Node shapeNode = ...;
            Vrml.EAI.Node boxNode = browser.CreateVrmlFromString("Box {}")[0];
            Vrml.EAI.Field.EventInSFNode set_geometry = (Vrml.EAI.Field.EventInSFNode)shapeNode.GetEventIn("set_geometry");
            set_geometry.SetValue(boxNode);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInSFNode.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventIn(System.String)">Node.GetEventIn</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventInSFRotation">
            <summary>
            Reference to a SFRotation event-in slot.
            </summary>
            <remarks>
            Use this class to write values into SFRotation event-in slots.
            </remarks>
            <example>
            The following example demonstrates how to rotate
            the children of a Transform node 180 degrees around the
            y axis:
            <code>
            Vrml.EAI.Node transform = ...;
            Vrml.EAI.Field.EventInSFRotation set_rotation = (Vrml.EAI.Field.EventInSFRotation)transform.GetEventIn("set_rotation");
            float x = 0.0f;
            float y = 1.0f;
            float z = 0.0f;
            float angle = (float)System.Math.PI;
            float[] rotation = new float[] { x, y, z, angle };
            set_rotation.SetValue(rotation);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInSFRotation.SetValue(System.Single[])">
            <summary>
            Sets the value of a SFRotation event-in slot.
            </summary>
            <param name="value">
            The new rotation value. This is a float array of at
            least fout elements. The first three elements are the
            x, y and z coordinate of the rotation axis. The fourth
            element is the rotation angle, in radians.
            </param>
            <example>
            The following example demonstrates how to rotate
            the children of a Transform node 180 degrees around the
            y axis:
            <code>
            Vrml.EAI.Node transform = ...;
            Vrml.EAI.Field.EventInSFRotation set_rotation = (Vrml.EAI.Field.EventInSFRotation)transform.GetEventIn("set_rotation");
            float x = 0.0f;
            float y = 1.0f;
            float z = 0.0f;
            float angle = (float)System.Math.PI;
            float[] rotation = new float[] { x, y, z, angle };
            set_rotation.SetValue(rotation);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInSFRotation.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventIn(System.String)">Node.GetEventIn</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventInSFString">
            <summary>
            Reference to a SFString event-in slot.
            </summary>
            <remarks>
            Use this class to write values into SFString event-in slots.
            </remarks>
            <example>
            The following example demonstrates how to change the description of
            an Anchor node:
            <code>
            Vrml.EAI.Node anchor = ...;
            Vrml.EAI.Field.EventInSFString set_description = (Vrml.EAI.Field.EventInSFString)anchor.GetEventIn("set_description");
            set_description.SetValue("Hello World!");
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInSFString.SetValue(System.String)">
            <summary>
            Sets the value of a SFString event-in slot.
            </summary>
            <param name="value">The new string value.</param>
            <example>
            The following example demonstrates how to change the description of
            an Anchor node:
            <code>
            Vrml.EAI.Node anchor = ...;
            Vrml.EAI.Field.EventInSFString set_description = (Vrml.EAI.Field.EventInSFString)anchor.GetEventIn("set_description");
            set_description.SetValue("Hello World!");
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInSFString.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventIn(System.String)">Node.GetEventIn</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventInSFTime">
            <summary>
            Reference to a SFTime event-in slot.
            </summary>
            <remarks>
            Use this class to write values into SFTime event-in slots.
            </remarks>
            <example>
            The following example demonstrates how to start a TimeSensor
            in 5 seconds from the current time:
            <code>
            Vrml.EAI.Node timeSensor = ...;
            Vrml.EAI.Field.EventInSFTime set_startTime = (Vrml.EAI.Field.EventInSFTime)timeSensor.GetEventIn("set_startTime");
            System.DateTime baseTime = new System.DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
            System.TimeSpan deltaTime = System.DateTime.UtcNow.Subtract(baseTime);
            set_startTime.SetValue(deltaTime.TotalSeconds + 5.0);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInSFTime.SetValue(System.Double)">
            <summary>
            Sets the value of the SFTime event-in slot.
            </summary>
            <param name="value">
            The new time value. The time is specified in a double
            value containing the number of seconds since January
            the 1st, 1970, 00:00:00 GMT.
            </param>
            <example>
            The following example demonstrates how to start a TimeSensor
            in 5 seconds from the current time:
            <code>
            Vrml.EAI.Node timeSensor = ...;
            Vrml.EAI.Field.EventInSFTime set_startTime = (Vrml.EAI.Field.EventInSFTime)timeSensor.GetEventIn("set_startTime");
            System.DateTime baseTime = new System.DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
            System.TimeSpan deltaTime = System.DateTime.UtcNow.Subtract(baseTime);
            set_startTime.SetValue(deltaTime.TotalSeconds + 5.0);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInSFTime.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventIn(System.String)">Node.GetEventIn</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventInSFVec2f">
            <summary>
            Reference to a SFVec2f event-in slot.
            </summary>
            <remarks>
            Use this class to write values into SFVec2f event-in slots.
            </remarks>
            <example>
            The following example demonstrates how to translate
            a texture 0.5 units upwards:
            <code>
            Vrml.EAI.Node textureTransform = ...;
            Vrml.EAI.Field.EventInSFVec2f set_translation = (Vrml.EAI.Field.EventInSFVec2f)textureTransform.GetEventIn("set_translation");
            float x = 0.0f;
            float y = 0.5f;
            float[] translation = new float[] { x, y };
            set_translation.SetValue(translation);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInSFVec2f.SetValue(System.Single[])">
            <summary>
            Sets the value of a SFVec2f event-in slot.
            </summary>
            <param name="value">
            The new vector value. This is an array of at least two
            float values. The first value is the x component of the
            vector, the second the y component.
            </param>
            <example>
            The following example demonstrates how to translate
            a texture 0.5 units upwards:
            <code>
            Vrml.EAI.Node textureTransform = ...;
            Vrml.EAI.Field.EventInSFVec2f set_translation = (Vrml.EAI.Field.EventInSFVec2f)textureTransform.GetEventIn("set_translation");
            float x = 0.0f;
            float y = 0.5f;
            float[] translation = new float[] { x, y };
            set_translation.SetValue(translation);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInSFVec2f.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventIn(System.String)">Node.GetEventIn</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventInSFVec3f">
            <summary>
            Reference to a SFVec3f event-in slot.
            </summary>
            <remarks>
            Use this class to write values into SFVec3f event-in slots.
            </remarks>
            <example>
            The following example demonstrates how to translate
            the children of a Transform node 1 unit upwards:
            <code>
            Vrml.EAI.Node transform = ...;
            Vrml.EAI.Field.EventInSFVec3f set_translation = (Vrml.EAI.Field.EventInSFVec3f)transform.GetEventIn("set_translation");
            float x = 0.0f;
            float y = 1.0f;
            float z = 0.0f;
            float[] translation = new float[] { x, y, z };
            set_translation.SetValue(translation);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInSFVec3f.SetValue(System.Single[])">
            <summary>
            Sets the value of a SFVec3f event-in slot.
            </summary>
            <param name="value">
            The new vector value. This is an array of at least
            three float values. The first value is the x
            component of the vector, the second the y
            component, and the third the z component.
            </param>
            <example>
            The following example demonstrates how to translate
            the children of a Transform node 1 unit upwards:
            <code>
            Vrml.EAI.Node transform = ...;
            Vrml.EAI.Field.EventInSFVec3f set_translation = (Vrml.EAI.Field.EventInSFVec3f)transform.GetEventIn("set_translation");
            float x = 0.0f;
            float y = 1.0f;
            float z = 0.0f;
            float[] translation = new float[] { x, y, z };
            set_translation.SetValue(translation);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventInSFVec3f.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventIn(System.String)">Node.GetEventIn</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventOut">
            <summary>
            Abstract ancestor of all event-out slots.
            </summary>
            <remarks>
            This class simply defines the <see cref="P:Vrml.EAI.Field.EventOut.UserData"/> property
            that allows to attach arbitrary application-specific data to
            event-out slots. This is an abstract class, i.e. you cannot
            create instances of this class. The only way to retrieve
            instances of this class is the
            <see cref="M:Vrml.EAI.Node.GetEventOut(System.String)">Node.GetEventOut</see> method.
            Usually you do not use this class directly, but cast it to one
            of its descendants for the respective VRML data types.
            </remarks>
            <example>
            The following example demonstrates how to get a reference
            to the "isActive" event-out slot of a "TouchSensor" node:
            <code>
            Vrml.EAI.Node touchSensor = browser.GetNode(...);
            Vrml.EAI.Field.EventOutSFBool isActive = (Vrml.EAI.Field.EventOutSFBool)touchSensor.GetEventOut("isActive");
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOut.AddVrmlEventDelegate(Vrml.EAI.Event.VrmlEventDelegate)">
             <summary>
             Adds a <see cref="T:Vrml.EAI.Event.VrmlEventDelegate"/> to the event-out slot (obsolete).
             </summary>
             <remarks>
             <para>
             The <see cref="T:Vrml.EAI.Event.VrmlEventDelegate"/> gets called whenever the value
             of the field changes.
             </para>
             <para>
             This method is obsolete! Please use <see cref="E:Vrml.EAI.Field.EventOut.VrmlEvent"/> instead.
             </para>
             </remarks>
             <param name="vrmlEventDelegate">The delegate</param>
             <example>
             The following example shows the skeleton of a <see cref="T:Vrml.EAI.Event.VrmlEventDelegate"/>,
             and it demonstrates how to add the delegate to an EventOut object, and how
             to remove the delegate when you're finished:
             <code>
             public class MyClass
             {
                 private static Vrml.EAI.Field.EventOutSFColor diffuseColor_changed;
            
                 private static void OnVrmlEvent(Vrml.EAI.Event.VrmlEvent evt)
                 {
                     Vrml.EAI.Field.BaseField field = evt.Source;
                     double time = evt.Time;
                     object data = evt.Data;
                     if (field == diffuseColor_changed)
                     {
                         // diffuseColor_changed event-out slot fired an event
                         ...
                     }
                     ...
                 }
            
                 public static void Main(string[] args)
                 {
                     ...
                     diffuseColor_changed = ...;
                     diffuseColor_changed.AddVrmlEventDelegate(OnVrmlEvent);
                     ...
                     diffuseColor_changed.RemoveVrmlEventDelegate(OnVrmlEvent);
                     ...
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOut.RemoveVrmlEventDelegate(Vrml.EAI.Event.VrmlEventDelegate)">
             <summary>
             Removes a <see cref="T:Vrml.EAI.Event.VrmlEventDelegate"/> from the event-out slot (obsolete).
             </summary>
             <param name="vrmlEventDelegate">The delegate</param>
             <remarks>
             <para>
             This method is obsolete! Please use <see cref="E:Vrml.EAI.Field.EventOut.VrmlEvent"/> instead.
             </para>
             </remarks>
             <example>
             The following example shows the skeleton of a <see cref="T:Vrml.EAI.Event.VrmlEventDelegate"/>,
             and it demonstrates how to add the delegate to an EventOut object, and how
             to remove the delegate when you're finished:
             <code>
             public class MyClass
             {
                 private static Vrml.EAI.Field.EventOutSFColor diffuseColor_changed;
            
                 private static void OnVrmlEvent(Vrml.EAI.Event.VrmlEvent evt)
                 {
                     Vrml.EAI.Field.BaseField field = evt.Source;
                     double time = evt.Time;
                     object data = evt.Data;
                     if (field == diffuseColor_changed)
                     {
                         // diffuseColor_changed event-out slot fired an event
                         ...
                     }
                     ...
                 }
            
                 public static void Main(string[] args)
                 {
                     ...
                     diffuseColor_changed = ...;
                     diffuseColor_changed.AddVrmlEventDelegate(OnVrmlEvent);
                     ...
                     diffuseColor_changed.RemoveVrmlEventDelegate(OnVrmlEvent);
                     ...
                 }
             }
             </code>
             </example>
        </member>
        <member name="E:Vrml.EAI.Field.EventOut.VrmlEvent">
             <summary>
             Gets fired whenever the value of the EventOut changes.
             </summary>
             <example>
             The following example demonstrates how to add an <see cref="T:Vrml.EAI.Event.VrmlEventHandler"/> to
             the VrmlEvent, and how to remove it when it is no longer needed:
             <code>
             public class MyClass
             {
                 private static Vrml.EAI.Field.EventOutSFColor diffuseColor_changed;
            
                 private static void OnVrmlEvent(object sender, Vrml.EAI.Event.VrmlEventArgs e)
                 {
                     Vrml.EAI.Field.BaseField field = (Vrml.EAI.Field.BaseField)sender;
                     double time = e.Time;
                     object data = e.Data;
                     if (field == diffuseColor_changed)
                     {
                         // diffuseColor_changed event-out slot fired an event
                         ...
                     }
                     ...
                 }
            
                 public static void Main(string[] args)
                 {
                     ...
                     diffuseColor_changed = ...;
                     diffuseColor_changed.VrmlEvent += OnVrmlEvent;
                     ...
                     diffuseColor_changed.VrmlEvent -= OnVrmlEvent;
                     ...
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:Vrml.EAI.Field.EventOut.UserData">
            <summary>
            Gets or sets the user data associated with this field.
            </summary>
            <value>An arbitrary data object.</value>
            <remarks>
            The user data is not used by the EAI in any way. It is
            a simple way to attach arbitrary application-specific
            data to event-out slots.
            </remarks>
            <example>
            The following example demonstrates how to attach a data
            object ("myData") to an event-out slot:
            <code>
            MyClass myData = ...;
            Vrml.EAI.Field.EventOut eventOut = ...;
            eventOut.UserData = myData;
            ...
            myData = eventOut.UserData;
            </code>
            </example>
        </member>
        <member name="T:Vrml.EAI.Field.EventOutMFColor">
            <summary>
            Reference to a MFColor event-out slot.
            </summary>
            <remarks>
            Use this class to read values from MFColor event-out slots.
            </remarks>
            <example>
            The following example gets the color values from the "color"
            field of a Color node and prints them to the console:
            <code>
            Vrml.EAI.Node color = ...;
            Vrml.EAI.Field.EventOutMFColor color_changed = (Vrml.EAI.Field.EventOutMFColor)color.GetEventOut("color_changed");
            float[][] c = color_changed.GetValue();
            for (int i = 0; i &lt; c.Length; ++i)
                System.Console.WriteLine("red = " + c[i][0] + ", green = " + c[i][1] + ", blue = " + c[i][2]);
            </code>
            </example>
        </member>
        <member name="T:Vrml.EAI.Field.EventOutMField">
            <summary>
            Abstract ancestor of all multi-value event-out slots.
            </summary>
            <remarks>
            This class simply defines the <see cref="P:Vrml.EAI.Field.EventOutMField.Size"/> property
            that allows to determine the number of elements in a
            multi-value event-out slot. This is an abstract class, i.e.
            you cannot create instances of this class. The only way to
            retrieve instances of this class is the
            <see cref="M:Vrml.EAI.Node.GetEventOut(System.String)">Node.GetEventOut</see> method.
            Usually you do not use this class directly, but cast it to one
            of its descendants for the respective VRML data types.
            </remarks>
            <example>
            The following example demonstrates how to get a reference
            to the "children" event-out slot of a "Group" node:
            <code>
            Vrml.EAI.Node group = browser.GetNode(...);
            Vrml.EAI.Field.EventOutMFNode children = (Vrml.EAI.Field.EventOutMFNode)group.GetEventOut("children");
            </code>
            </example>
        </member>
        <member name="P:Vrml.EAI.Field.EventOutMField.Size">
            <summary>
            Gets the number of elements in the multi-value event-out slot.
            </summary>
            <value>The number of elements.</value>
            <remarks>This is a read-only property.</remarks>
            <example>
            The following example prints the number of nodes
            that are children of a "Group" node to the console:
            <code>
            Vrml.EAI.Node group = browser.GetNode(...);
            Vrml.EAI.Field.EventOutMFNode children = (Vrml.EAI.Field.EventOutMFNode)group.GetEventOut("children");
            System.Console.WriteLine("Number of children = " + children.Size);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFColor.GetValue">
            <summary>
            Returns the current value of a MFColor event-out slot.
            </summary>
            <returns>
            The current color values. This is an array of float arrays that
            contain three values. The first value is the red component of
            the color, the second value the green component, and the third
            value the blue component. Each component is between 0 and 1,
            inclusively. 0 means no intensity, and 1 means full intensity.
            </returns>
            <example>
            The following example gets the color values from the "color"
            field of a Color node and prints them to the console:
            <code>
            Vrml.EAI.Node color = ...;
            Vrml.EAI.Field.EventOutMFColor color_changed = (Vrml.EAI.Field.EventOutMFColor)color.GetEventOut("color_changed");
            float[][] c = color_changed.GetValue();
            for (int i = 0; i &lt; c.Length; ++i)
                System.Console.WriteLine("red = " + c[i][0] + ", green = " + c[i][1] + ", blue = " + c[i][2]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFColor.GetValue(System.Single[][])">
            <summary>
            Returns the current value of a MFColor event-out slot.
            </summary>
            <param name="value">
            An array of float arrays that contain at least three values.
            This array gets filled with the current color values. The first
            element of each array gets filled with the red color component,
            the second element with the green component, and the third element
            with the blue component. Each component is between 0 and 1,
            inclusively. 0 means no intensity, and 1 means full intensity.
            </param>
            <example>
            The following example gets the color values from the "color"
            field of a Color node and prints them to the console:
            <code>
            Vrml.EAI.Node color = ...;
            Vrml.EAI.Field.EventOutMFColor color_changed = (Vrml.EAI.Field.EventOutMFColor)color.GetEventOut("color_changed");
            int size = color_changed.Size;
            float[][] c = new float[size][];
            for (int i = 0; i &lt; size; ++i)
                c[i] = new float[3];
            color_changed.GetValue(c);
            for (int i = 0; i &lt; size; ++i)
                System.Console.WriteLine("red = " + c[i][0] + ", green = " + c[i][1] + ", blue = " + c[i][2]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFColor.GetValue(System.Single[])">
            <summary>
            Returns the current value of a MFColor event-out slot.
            </summary>
            <param name="value">
            An array of float values that gets filled with the
            current color values. The number of elements in this array
            must be at least three times the number of color values. The
            elements at the positions [i x 3] get filled with the red
            color components, the elements at [i x 3 + 1] with the green
            components, and the elements at [i x 3 + 2] with the blue
            components (for 0 &lt;= i &lt; <see cref="P:Vrml.EAI.Field.EventOutMField.Size"/>).
            Each component is between 0 and 1, inclusively. 0 means no
            intensity, and 1 means full intensity.
            </param>
            <example>
            The following example gets the color values from the "color"
            field of a Color node and prints them to the console:
            <code>
            Vrml.EAI.Node color = ...;
            Vrml.EAI.Field.EventOutMFColor color_changed = (Vrml.EAI.Field.EventOutMFColor)color.GetEventOut("color_changed");
            float[] c = new float[color_changed.Size * 3];
            color_changed.GetValue(c);
            for (int i = 0; i &lt; c.Length; i += 3)
                System.Console.WriteLine("red = " + c[i] + ", green = " + c[i + 1] + ", blue = " + c[i + 2]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFColor.Get1Value(System.Int32)">
            <summary>
            Returns one element of a MFColor event-out slot.
            </summary>
            <param name="index">The index of the element, starting at 0</param>
            <returns>
            The color value. This is an array of three float values.
            The first value contains the red color component, the second
            value the green component, and the third value the blue component.
            Each component is between 0 and 1, inclusively. 0 means no
            intensity, and 1 means full intensity.
            </returns>
            <example>
            The following example gets the first color value from the "color"
            field of a Color node and prints it to the console:
            <code>
            Vrml.EAI.Node color = ...;
            Vrml.EAI.Field.EventOutMFColor color_changed = (Vrml.EAI.Field.EventOutMFColor)color.GetEventOut("color_changed");
            float[] c = color_changed.Get1Value(0);
            System.Console.WriteLine("red = " + c[0] + ", green = " + c[1] + ", blue = " + c[2]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFColor.Get1Value(System.Int32,System.Single[])">
            <summary>
            Returns one element of a MFColor event-out slot.
            </summary>
            <param name="index">The index of the element, starting at 0</param>
            <param name="value">
            An array of at least three float values that gets filled with
            the color components. The first value gets filled with the red
            color component, the second value with the green component, and
            the third value with the blue component. Each component is between
            0 and 1, inclusively. 0 means no intensity, and 1 means full
            intensity.
            </param>
            <example>
            The following example gets the first color value from the "color"
            field of a Color node and prints it to the console:
            <code>
            Vrml.EAI.Node color = ...;
            Vrml.EAI.Field.EventOutMFColor color_changed = (Vrml.EAI.Field.EventOutMFColor)color.GetEventOut("color_changed");
            float[] c = new float[3];
            color_changed.Get1Value(0, c);
            System.Console.WriteLine("red = " + c[0] + ", green = " + c[1] + ", blue = " + c[2]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFColor.#ctor">
            <summary>
            Default Constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventOut(System.String)">Node.GetEventOut</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventOutMFFloat">
            <summary>
            Reference to a MFFloat event-out slot.
            </summary>
            <remarks>
            Use this class to read values from MFFloat event-out slots.
            </remarks>
            <example>
            The following example gets the keys from the "key" field of a
            CoordinateInterpolator node and prints them to the console:
            <code>
            Vrml.EAI.Node coordinateInterpolator = ...;
            Vrml.EAI.Field.EventOutMFFloat key_changed = (Vrml.EAI.Field.EventOutMFFloat)coordinateInterpolator.GetEventOut("key_changed");
            float[] f = key_changed.GetValue();
            for (int i = 0; i &lt; f.Length; ++i)
                System.Console.WriteLine(f[i]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFFloat.GetValue">
            <summary>
            Returns the current value of a MFFloat event-out slot.
            </summary>
            <returns>The current float values.</returns>
            <example>
            The following example gets the keys from the "key" field of a
            CoordinateInterpolator node and prints them to the console:
            <code>
            Vrml.EAI.Node coordinateInterpolator = ...;
            Vrml.EAI.Field.EventOutMFFloat key_changed = (Vrml.EAI.Field.EventOutMFFloat)coordinateInterpolator.GetEventOut("key_changed");
            float[] f = key_changed.GetValue();
            for (int i = 0; i &lt; f.Length; ++i)
                System.Console.WriteLine(f[i]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFFloat.GetValue(System.Single[])">
            <summary>
            Returns the current value of a MFFloat event-out slot.
            </summary>
            <param name="value">
            An array of float values that gets filled with the
            current value of the MFFloat event-out slot.
            </param>
            <example>
            The following example gets the keys from the "key" field of a
            CoordinateInterpolator node and prints them to the console:
            <code>
            Vrml.EAI.Node coordinateInterpolator = ...;
            Vrml.EAI.Field.EventOutMFFloat key_changed = (Vrml.EAI.Field.EventOutMFFloat)coordinateInterpolator.GetEventOut("key_changed");
            int size = key_changed.Size;
            float[] f = new float[size];
            key_changed.GetValue(f);
            for (int i = 0; i &lt; size; ++i)
                System.Console.WriteLine(f[i]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFFloat.Get1Value(System.Int32)">
            <summary>
            Returns one element of a MFFloat event-out slot.
            </summary>
            <param name="index">The index of the element, starting at 0</param>
            <returns>The float value.</returns>
            <example>
            The following example gets the first key from the "key" field
            of a CoordinateInterpolator node and prints it to the console:
            <code>
            Vrml.EAI.Node coordinateInterpolator = ...;
            Vrml.EAI.Field.EventOutMFFloat key_changed = (Vrml.EAI.Field.EventOutMFFloat)coordinateInterpolator.GetEventOut("key_changed");
            System.Console.WriteLine(key_changed.Get1Value(0));
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFFloat.#ctor">
            <summary>
            Default Constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventOut(System.String)">Node.GetEventOut</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventOutMFInt32">
            <summary>
            Reference to a MFInt32 event-out slot.
            </summary>
            <remarks>
            Use this class to read values from MFInt32 event-out slots.
            </remarks>
            <example>
            The following example gets the values of an "index_changed"
            event-out slot of a Script node and prints them to the console:
            <code>
            Vrml.EAI.Node script = ...;
            Vrml.EAI.Field.EventOutMFInt32 index_changed = (Vrml.EAI.Field.EventOutMFInt32)script.GetEventOut("index_changed");
            int[] v = index_changed.GetValue();
            for (int i = 0; i &lt; v.Length; ++i)
                System.Console.WriteLine(v[i]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFInt32.GetValue">
            <summary>
            Returns the current value of a MFInt32 event-out slot.
            </summary>
            <returns>The current integer values.</returns>
            <example>
            The following example gets the values of an "index_changed"
            event-out slot of a Script node and prints them to the console:
            <code>
            Vrml.EAI.Node script = ...;
            Vrml.EAI.Field.EventOutMFInt32 index_changed = (Vrml.EAI.Field.EventOutMFInt32)script.GetEventOut("index_changed");
            int[] v = index_changed.GetValue();
            for (int i = 0; i &lt; v.Length; ++i)
                System.Console.WriteLine(v[i]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFInt32.GetValue(System.Int32[])">
            <summary>
            Returns the current value of a MFInt32 event-out slot.
            </summary>
            <param name="value">
            An array of integer values that gets filled with the
            current integer values of the MFInt32 event-out slot.
            </param>
            <example>
            The following example gets the values of an "index_changed"
            event-out slot of a Script node and prints them to the console:
            <code>
            Vrml.EAI.Node script = ...;
            Vrml.EAI.Field.EventOutMFInt32 index_changed = (Vrml.EAI.Field.EventOutMFInt32)script.GetEventOut("index_changed");
            int size = index_changed.Size;
            int[] v = new int[size];
            index_changed.GetValue(v);
            for (int i = 0; i &lt; size; ++i)
                System.Console.WriteLine(v[i]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFInt32.Get1Value(System.Int32)">
            <summary>
            Returns one element of a MFFloat event-out slot.
            </summary>
            <param name="index">The index of the element, starting at 0</param>
            <returns>The integer value.</returns>
            <example>
            The following example gets the first value of an "index_changed"
            event-out slot of a Script node and prints it to the console:
            <code>
            Vrml.EAI.Node script = ...;
            Vrml.EAI.Field.EventOutMFInt32 index_changed = (Vrml.EAI.Field.EventOutMFInt32)script.GetEventOut("index_changed");
            System.Console.WriteLine(index_changed.Get1Value(0));
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFInt32.#ctor">
            <summary>
            Default Constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventOut(System.String)">Node.GetEventOut</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventOutMFNode">
            <summary>
            Reference to a MFNode event-out slot.
            </summary>
            <remarks>
            Use this class to read values from MFNode event-out slots.
            </remarks>
            <example>
            The following example gets the nodes from the "children" field of a
            Group node and prints their types to the console:
            <code>
            Vrml.EAI.Node group = ...;
            Vrml.EAI.Field.EventOutMFNode children_changed = (Vrml.EAI.Field.EventOutMFNode)group.GetEventOut("children_changed");
            Vrml.EAI.Node[] nodes = children_changed.GetValue();
            for (int i = 0; i &lt; nodes.Length; ++i)
                if (nodes[i] == null)
                    System.Console.WriteLine("null");
                else
                    System.Console.WriteLine(nodes[i].Type);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFNode.GetValue">
            <summary>
            Returns the current value of a MFNode event-out slot.
            </summary>
            <returns>The current nodes.</returns>
            <example>
            The following example gets the nodes from the "children" field of a
            Group node and prints their types to the console:
            <code>
            Vrml.EAI.Node group = ...;
            Vrml.EAI.Field.EventOutMFNode children_changed = (Vrml.EAI.Field.EventOutMFNode)group.GetEventOut("children_changed");
            Vrml.EAI.Node[] nodes = children_changed.GetValue();
            for (int i = 0; i &lt; nodes.Length; ++i)
                if (nodes[i] == null)
                    System.Console.WriteLine("null");
                else
                    System.Console.WriteLine(nodes[i].Type);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFNode.GetValue(Vrml.EAI.Node[])">
            <summary>
            Returns the current value of a MFNode event-out slot.
            </summary>
            <param name="value">
            An array of nodes that gets filled with the current
            value of the MFNode event-out slot.
            </param>
            <example>
            The following example gets the nodes from the "children" field of a
            Group node and prints their types to the console:
            <code>
            Vrml.EAI.Node group = ...;
            Vrml.EAI.Field.EventOutMFNode children_changed = (Vrml.EAI.Field.EventOutMFNode)group.GetEventOut("children_changed");
            int size = children_changed.Size;
            Vrml.EAI.Node[] nodes = new Vrml.EAI.Node[size];
            children_changed.GetValue(nodes);
            for (int i = 0; i &lt; nodes.Length; ++i)
                if (nodes[i] == null)
                    System.Console.WriteLine("null");
                else
                    System.Console.WriteLine(nodes[i].Type);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFNode.Get1Value(System.Int32)">
            <summary>
            Returns one element of a MFNode event-out slot.
            </summary>
            <param name="index">The index of the element, starting at 0</param>
            <returns>The node.</returns>
            <example>
            The following example gets the first node from the "children" field
            of a Group node and prints its type to the console:
            <code>
            Vrml.EAI.Node group = ...;
            Vrml.EAI.Field.EventOutMFNode children_changed = (Vrml.EAI.Field.EventOutMFNode)group.GetEventOut("children_changed");
            Vrml.EAI.Node node = children_changed.Get1Value(0);
            if (node == null)
                System.Console.WriteLine("null");
            else
                System.Console.WriteLine(node.Type);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFNode.#ctor">
            <summary>
            Default Constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventOut(System.String)">Node.GetEventOut</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventOutMFRotation">
            <summary>
            Reference to a MFRotation event-out slot.
            </summary>
            <remarks>
            Use this class to read values from MFRotation event-out slots.
            </remarks>
            <example>
            The following example gets the rotation values from the "keyValue"
            field of an OrientationInterpolator node and prints them to the console:
            <code>
            Vrml.EAI.Node orientationInterpolator = ...;
            Vrml.EAI.Field.EventOutMFRotation keyValue_changed = (Vrml.EAI.Field.EventOutMFRotation)orientationInterpolator.GetEventOut("keyValue_changed");
            float[][] r = keyValue_changed.GetValue();
            for (int i = 0; i &lt; r.Length; ++i)
                System.Console.WriteLine("x = " + r[i][0] + ", y = " + r[i][1] + ", z = " + r[i][2] + ", angle = " + r[i][3]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFRotation.GetValue">
            <summary>
            Returns the current value of a MFRotation event-out slot.
            </summary>
            <returns>
            The current rotation values. This is an array of float arrays that
            contain four values. The first value is the x component of
            the rotation axis, the second value the y component, the third
            value the z component, and the fourth value the rotation angle in
            radians.
            </returns>
            <example>
            The following example gets the rotation values from the "keyValue"
            field of an OrientationInterpolator node and prints them to the console:
            <code>
            Vrml.EAI.Node orientationInterpolator = ...;
            Vrml.EAI.Field.EventOutMFRotation keyValue_changed = (Vrml.EAI.Field.EventOutMFRotation)orientationInterpolator.GetEventOut("keyValue_changed");
            float[][] r = keyValue_changed.GetValue();
            for (int i = 0; i &lt; r.Length; ++i)
                System.Console.WriteLine("x = " + r[i][0] + ", y = " + r[i][1] + ", z = " + r[i][2] + ", angle = " + r[i][3]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFRotation.GetValue(System.Single[][])">
            <summary>
            Returns the current value of a MFRotation event-out slot.
            </summary>
            <param name="value">
            An array of float arrays that contain at least four values.
            This array gets filled with the current rotation values. The first
            element of each array gets filled with the x component of the
            rotation axis, the second element with the y component, the third
            element with the z component, and the fourth element with the
            rotation angle in radians.
            </param>
            <example>
            The following example gets the rotation values from the "keyValue"
            field of an OrientationInterpolator node and prints them to the console:
            <code>
            Vrml.EAI.Node orientationInterpolator = ...;
            Vrml.EAI.Field.EventOutMFRotation keyValue_changed = (Vrml.EAI.Field.EventOutMFRotation)orientationInterpolator.GetEventOut("keyValue_changed");
            int size = keyValue_changed.Size;
            float[][] r = new float[size][];
            for (int i = 0; i &lt; size; ++i)
                r[i] = new float[4];
            keyValue_changed.GetValue(r);
            for (int i = 0; i &lt; size; ++i)
                System.Console.WriteLine("x = " + r[i][0] + ", y = " + r[i][1] + ", z = " + r[i][2] + ", angle = " + r[i][3]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFRotation.GetValue(System.Single[])">
            <summary>
            Returns the current value of a MFRotation event-out slot.
            </summary>
            <param name="value">
            An array of float values that gets filled with the
            current rotation values. The number of elements in this array
            must be at least four times the number of rotation values. The
            elements at the positions [i x 4] get filled with the x components
            of the rotation axes, the elements at [i x 4 + 1] with the y
            components, the elements at [i x 4 + 2] with the z components,
            and the elements at [i x 4 + 3] with the rotation angles in
            radians (for 0 &lt;= i &lt; <see cref="P:Vrml.EAI.Field.EventOutMField.Size"/>).
            </param>
            <example>
            The following example gets the rotation values from the "keyValue"
            field of an OrientationInterpolator node and prints them to the console:
            <code>
            Vrml.EAI.Node orientationInterpolator = ...;
            Vrml.EAI.Field.EventOutMFRotation keyValue_changed = (Vrml.EAI.Field.EventOutMFRotation)orientationInterpolator.GetEventOut("keyValue_changed");
            float[] r = new float[keyValue_changed.Size * 4];
            keyValue_changed.GetValue(r);
            for (int i = 0; i &lt; r.Length; i += 4)
                System.Console.WriteLine("x = " + r[i] + ", y = " + r[i + 1] + ", z = " + r[i + 2] + ", angle = " + r[i + 3]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFRotation.Get1Value(System.Int32)">
            <summary>
            Returns one element of a MFRotation event-out slot.
            </summary>
            <param name="index">The index of the element, starting at 0</param>
            <returns>The rotation value. This is an array of four
            float values. The first value contains the x component
            of the rotation axis, the second value the y component,
            the third value the z component, and the fourth value
            the rotation angle in radians.</returns>
            <example>
            The following example gets the first rotation value from the "keyValue"
            field of an OrientationInterpolator node and print it to the console:
            <code>
            Vrml.EAI.Node orientationInterpolator = ...;
            Vrml.EAI.Field.EventOutMFRotation keyValue_changed = (Vrml.EAI.Field.EventOutMFRotation)orientationInterpolator.GetEventOut("keyValue_changed");
            float[] r = keyValue_changed.Get1Value(0);
            System.Console.WriteLine("x = " + r[0] + ", y = " + r[1] + ", z = " + r[2] + ", angle = " + r[3]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFRotation.Get1Value(System.Int32,System.Single[])">
            <summary>
            Returns one element of a MFRotation event-out slot.
            </summary>
            <param name="index">The index of the element, starting at 0</param>
            <param name="value">
            An array of at least four float values that gets filled
            with the rotation. The first value gets filled with the
            x component of the rotation axis, the second value with
            the y component, the third value with the z component, and
            the fourth value with the rotation angle in radians.
            </param>
            <example>
            The following example gets the first rotation value from the "keyValue"
            field of an OrientationInterpolator node and print it to the console:
            <code>
            Vrml.EAI.Node orientationInterpolator = ...;
            Vrml.EAI.Field.EventOutMFRotation keyValue_changed = (Vrml.EAI.Field.EventOutMFRotation)orientationInterpolator.GetEventOut("keyValue_changed");
            float[] r = new float[4];
            keyValue_changed.Get1Value(0, r);
            System.Console.WriteLine("x = " + r[0] + ", y = " + r[1] + ", z = " + r[2] + ", angle = " + r[3]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFRotation.#ctor">
            <summary>
            Default Constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventOut(System.String)">Node.GetEventOut</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventOutMFString">
            <summary>
            Reference to a MFString event-out slot.
            </summary>
            <remarks>
            Use this class to read values from MFString event-out slots.
            </remarks>
            <example>
            The following example gets the lines from the "string" field of a
            Text node and prints them to the console:
            <code>
            Vrml.EAI.Node text = ...;
            Vrml.EAI.Field.EventOutMFString string_changed = (Vrml.EAI.Field.EventOutMFString)text.GetEventOut("string_changed");
            string[] s = string_changed.GetValue();
            for (int i = 0; i &lt; s.Length; ++i)
                System.Console.WriteLine(s[i]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFString.GetValue">
            <summary>
            Returns the current value of a MFString event-out slot.
            </summary>
            <returns>The current string values.</returns>
            <example>
            The following example gets the lines from the "string" field of a
            Text node and prints them to the console:
            <code>
            Vrml.EAI.Node text = ...;
            Vrml.EAI.Field.EventOutMFString string_changed = (Vrml.EAI.Field.EventOutMFString)text.GetEventOut("string_changed");
            string[] s = string_changed.GetValue();
            for (int i = 0; i &lt; s.Length; ++i)
                System.Console.WriteLine(s[i]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFString.GetValue(System.String[])">
            <summary>
            Returns the current value of a MFString event-out slot.
            </summary>
            <param name="value">
            An array of strings that gets filled with the current
            string values of the MFString event-out slot.
            </param>
            <example>
            The following example gets the lines from the "string" field of a
            Text node and prints them to the console:
            <code>
            Vrml.EAI.Node text = ...;
            Vrml.EAI.Field.EventOutMFString string_changed = (Vrml.EAI.Field.EventOutMFString)text.GetEventOut("string_changed");
            int size = string_changed.Size;
            string[] s = new string[size];
            string_changed.GetValue(s);
            for (int i = 0; i &lt; size; ++i)
                System.Console.WriteLine(s[i]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFString.Get1Value(System.Int32)">
            <summary>
            Returns one element of a MFString event-out slot.
            </summary>
            <param name="index">The index of the element, starting at 0</param>
            <returns>The string.</returns>
            <example>
            The following example gets the first line from the "string" field
            of a Text node and prints it to the console:
            <code>
            Vrml.EAI.Node text = ...;
            Vrml.EAI.Field.EventOutMFString string_changed = (Vrml.EAI.Field.EventOutMFString)text.GetEventOut("string_changed");
            System.Console.WriteLine(string_changed.Get1Value(0));
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFString.#ctor">
            <summary>
            Default Constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventOut(System.String)">Node.GetEventOut</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventOutMFTime">
            <summary>
            Reference to a MFTime event-out slot.
            </summary>
            <remarks>
            Use this class to read values from MFTime event-out slots.
            </remarks>
            <example>
            The following example gets the values of an "timestamps_changed"
            event-out slot of a Script node and prints them to the console:
            <code>
            Vrml.EAI.Node script = ...;
            Vrml.EAI.Field.EventOutMFTime timestamps_changed = (Vrml.EAI.Field.EventOutMFTime)script.GetEventOut("timestamps_changed");
            System.DateTime baseTime = new System.DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
            double[] t = timestamps_changed.GetValue();
            for (int i = 0; i &lt; t.Length; ++i)
                System.Console.WriteLine(baseTime.AddSeconds(t[i]).ToLocalTime());
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFTime.GetValue">
            <summary>
            Returns the current value of a MFTime event-out slot.
            </summary>
            <returns>
            The current time values. This is an array of double values
            containing the number of seconds since January the 1st, 1970,
            00:00:00 GMT.
            </returns>
            <example>
            The following example gets the values of an "timestamps_changed"
            event-out slot of a Script node and prints them to the console:
            <code>
            Vrml.EAI.Node script = ...;
            Vrml.EAI.Field.EventOutMFTime timestamps_changed = (Vrml.EAI.Field.EventOutMFTime)script.GetEventOut("timestamps_changed");
            System.DateTime baseTime = new System.DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
            double[] t = timestamps_changed.GetValue();
            for (int i = 0; i &lt; t.Length; ++i)
                System.Console.WriteLine(baseTime.AddSeconds(t[i]).ToLocalTime());
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFTime.GetValue(System.Double[])">
            <summary>
            Returns the current value of a MFTime event-out slot.
            </summary>
            <param name="value">
            An array of double values that gets filled with the
            current time values of the MFTime event-out slot.
            The double values contain the number of seconds since
            January the 1st, 1970, 00:00:00 GMT.
            </param>
            <example>
            The following example gets the values of an "timestamps_changed"
            event-out slot of a Script node and prints them to the console:
            <code>
            Vrml.EAI.Node script = ...;
            Vrml.EAI.Field.EventOutMFTime timestamps_changed = (Vrml.EAI.Field.EventOutMFTime)script.GetEventOut("timestamps_changed");
            System.DateTime baseTime = new System.DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
            int size = timestamps_changed.Size;
            double[] t = new double[size];
            timestamps_changed.GetValue(t);
            for (int i = 0; i &lt; size; ++i)
                System.Console.WriteLine(baseTime.AddSeconds(t[i]).ToLocalTime());
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFTime.Get1Value(System.Int32)">
            <summary>
            Returns one element of a MFTime event-out slot.
            </summary>
            <param name="index">The index of the element, starting at 0</param>
            <returns>
            The time value. This is a double value containing the number of
            seconds since January the 1st, 1970, 00:00:00 GMT.
            </returns>
            <example>
            The following example gets the first value of an "timestamps_changed"
            event-out slot of a Script node and prints it to the console:
            <code>
            Vrml.EAI.Node script = ...;
            Vrml.EAI.Field.EventOutMFTime timestamps_changed = (Vrml.EAI.Field.EventOutMFTime)script.GetEventOut("timestamps_changed");
            System.DateTime baseTime = new System.DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
            System.Console.WriteLine(baseTime.AddSeconds(timestamps_changed.Get1Value(0)).ToLocalTime());
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFTime.#ctor">
            <summary>
            Default Constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventOut(System.String)">Node.GetEventOut</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventOutMFVec2f">
            <summary>
            Reference to a MFVec2f event-out slot.
            </summary>
            <remarks>
            Use this class to read values from MFVec2f event-out slots.
            </remarks>
            <example>
            The following example gets the texture coordinates from the
            "point" field of a TextureCoordinate node and prints them to
            the console:
            <code>
            Vrml.EAI.Node textureCoordinate = ...;
            Vrml.EAI.Field.EventOutMFVec2f point_changed = (Vrml.EAI.Field.EventOutMFVec2f)textureCoordinate.GetEventOut("point_changed");
            float[][] v = point_changed.GetValue();
            for (int i = 0; i &lt; v.Length; ++i)
                System.Console.WriteLine("x = " + v[i][0] + ", y = " + v[i][1]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFVec2f.GetValue">
            <summary>
            Returns the current value of the MFVec2f event-out slot.
            </summary>
            <returns>
            The current vector values. This is an array of float arrays that
            contain two values. The first value is the x component of
            the vector, and the second value the y component.
            </returns>
            <example>
            The following example gets the texture coordinates from the
            "point" field of a TextureCoordinate node and prints them to
            the console:
            <code>
            Vrml.EAI.Node textureCoordinate = ...;
            Vrml.EAI.Field.EventOutMFVec2f point_changed = (Vrml.EAI.Field.EventOutMFVec2f)textureCoordinate.GetEventOut("point_changed");
            float[][] v = point_changed.GetValue();
            for (int i = 0; i &lt; v.Length; ++i)
                System.Console.WriteLine("x = " + v[i][0] + ", y = " + v[i][1]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFVec2f.GetValue(System.Single[][])">
            <summary>
            Returns the current value of the MFVec2f event-out slot.
            </summary>
            <param name="value">
            An array of float arrays that contain at least two values.
            This array gets filled with the current vector values. The first
            element of each array gets filled with the x component of the
            vector, and the second element with the y component.
            </param>
            <example>
            The following example gets the texture coordinates from the
            "point" field of a TextureCoordinate node and prints them to
            the console:
            <code>
            Vrml.EAI.Node textureCoordinate = ...;
            Vrml.EAI.Field.EventOutMFVec2f point_changed = (Vrml.EAI.Field.EventOutMFVec2f)textureCoordinate.GetEventOut("point_changed");
            int size = point_changed.Size;
            float[][] v = new float[size][];
            for (int i = 0; i &lt; size; ++i)
                v[i] = new float[2];
            point_changed.GetValue(v);
            for (int i = 0; i &lt; size; ++i)
                System.Console.WriteLine("x = " + v[i][0] + ", y = " + v[i][1]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFVec2f.GetValue(System.Single[])">
            <summary>
            Returns the current value of the MFVec2f event-out slot.
            </summary>
            <param name="value">
            An array of float values that gets filled with the
            current vector values. The number of elements in this array
            must be at least two times the number of vector values. The
            elements at the positions [i x 2] get filled with the x components
            of the vectors, and the elements at [i x 2 + 1] with the y
            components (for 0 &lt;= i &lt; <see cref="P:Vrml.EAI.Field.EventOutMField.Size"/>).
            </param>
            <example>
            The following example gets the texture coordinates from the
            "point" field of a TextureCoordinate node and prints them to
            the console:
            <code>
            Vrml.EAI.Node textureCoordinate = ...;
            Vrml.EAI.Field.EventOutMFVec2f point_changed = (Vrml.EAI.Field.EventOutMFVec2f)textureCoordinate.GetEventOut("point_changed");
            float[] v = new float[point_changed.Size * 2];
            point_changed.GetValue(v);
            for (int i = 0; i &lt; v.Length; i += 2)
                System.Console.WriteLine("x = " + v[i] + ", y = " + v[i + 1]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFVec2f.Get1Value(System.Int32)">
            <summary>
            Returns one element of the MFVec2f event-out slot.
            </summary>
            <param name="index">The index of the element, starting at 0.</param>
            <returns>The vector value. This is an array of two
            float values. The first value contains the x component
            of the vector, and the second value the y component.</returns>
            <example>
            The following example gets the first texture coordinate from the
            "point" field of a TextureCoordinate node and prints it to
            the console:
            <code>
            Vrml.EAI.Node textureCoordinate = ...;
            Vrml.EAI.Field.EventOutMFVec2f point_changed = (Vrml.EAI.Field.EventOutMFVec2f)textureCoordinate.GetEventOut("point_changed");
            float[] v = point_changed.Get1Value(0);
            System.Console.WriteLine("x = " + v[0] + ", y = " + v[1]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFVec2f.Get1Value(System.Int32,System.Single[])">
            <summary>
            Returns one element of the MFVec2f event-out slot.
            </summary>
            <param name="index">The index of the element, starting at 0.</param>
            <param name="value">
            An array of at least two float values that gets filled
            with the vector. The first value gets filled with the
            x component of the vector, and the second value with
            the y component.
            </param>
            <example>
            The following example gets the first texture coordinate from the
            "point" field of a TextureCoordinate node and prints it to
            the console:
            <code>
            Vrml.EAI.Node textureCoordinate = ...;
            Vrml.EAI.Field.EventOutMFVec2f point_changed = (Vrml.EAI.Field.EventOutMFVec2f)textureCoordinate.GetEventOut("point_changed");
            float[] v = new float[2];
            point_changed.Get1Value(0, v);
            System.Console.WriteLine("x = " + v[0] + ", y = " + v[1]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFVec2f.#ctor">
            <summary>
            Default Constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventOut(System.String)">Node.GetEventOut</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventOutMFVec3f">
            <summary>
            Reference to a MFVec3f event-out slot.
            </summary>
            <remarks>
            Use this class to read values from MFVec3f event-out slots.
            </remarks>
            <example>
            The following example gets the coordinates from the "point"
            field of a Coordinate node and prints them to the console:
            <code>
            Vrml.EAI.Node coordinate = ...;
            Vrml.EAI.Field.EventOutMFVec3f point_changed = (Vrml.EAI.Field.EventOutMFVec3f)coordinate.GetEventOut("point_changed");
            float[][] v = point_changed.GetValue();
            for (int i = 0; i &lt; v.Length; ++i)
                System.Console.WriteLine("x = " + v[i][0] + ", y = " + v[i][1] + ", z = " + v[i][2]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFVec3f.GetValue">
            <summary>
            Returns the current value of the MFVec3f event-out slot.
            </summary>
            <returns>
            The current vector values. This is an array of float arrays that
            contain three values. The first value is the x component of
            the vector, the second value the y component, and the third
            value the z component.
            </returns>
            <example>
            The following example gets the coordinates from the "point"
            field of a Coordinate node and prints them to the console:
            <code>
            Vrml.EAI.Node coordinate = ...;
            Vrml.EAI.Field.EventOutMFVec3f point_changed = (Vrml.EAI.Field.EventOutMFVec3f)coordinate.GetEventOut("point_changed");
            float[][] v = point_changed.GetValue();
            for (int i = 0; i &lt; v.Length; ++i)
                System.Console.WriteLine("x = " + v[i][0] + ", y = " + v[i][1] + ", z = " + v[i][2]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFVec3f.GetValue(System.Single[][])">
            <summary>
            Returns the current value of the MFVec3f event-out slot.
            </summary>
            <param name="value">
            An array of float arrays that contain at least three values.
            This array gets filled with the current vector values. The first
            element of each array gets filled with the x component of the
            vector, the second element with the y component, and the third
            element with the z component.
            </param>
            <example>
            The following example gets the coordinates from the "point"
            field of a Coordinate node and prints them to the console:
            <code>
            Vrml.EAI.Node coordinate = ...;
            Vrml.EAI.Field.EventOutMFVec3f point_changed = (Vrml.EAI.Field.EventOutMFVec3f)coordinate.GetEventOut("point_changed");
            int size = point_changed.Size;
            float[][] v = new float[size][];
            for (int i = 0; i &lt; size; ++i)
                v[i] = new float[3];
            point_changed.GetValue(v);
            for (int i = 0; i &lt; size; ++i)
                System.Console.WriteLine("x = " + v[i][0] + ", y = " + v[i][1] + ", z = " + v[i][2]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFVec3f.GetValue(System.Single[])">
            <summary>
            Returns the current value of the MFVec3f event-out slot.
            </summary>
            <param name="value">
            An array of float values that gets filled with the
            current vector values. The number of elements in this array
            must be at least three times the number of vector values. The
            elements at the positions [i x 3] get filled with the x components
            of the vectors, the elements at [i x 3 + 1] with the y
            components, and the elements at [i x 3 + 2] with the z components
            (for 0 &lt;= i &lt; <see cref="P:Vrml.EAI.Field.EventOutMField.Size"/>).
            </param>
            <example>
            The following example gets the coordinates from the "point"
            field of a Coordinate node and prints them to the console:
            <code>
            Vrml.EAI.Node coordinate = ...;
            Vrml.EAI.Field.EventOutMFVec3f point_changed = (Vrml.EAI.Field.EventOutMFVec3f)coordinate.GetEventOut("point_changed");
            float[] v = new float[point_changed.Size * 3];
            point_changed.GetValue(v);
            for (int i = 0; i &lt; v.Length; i += 3)
                System.Console.WriteLine("x = " + v[i] + ", y = " + v[i + 1] + ", z = " + v[i + 2]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFVec3f.Get1Value(System.Int32)">
            <summary>
            Returns one element of the MFVec3f event-out slot.
            </summary>
            <param name="index">The index of the element, starting at 0.</param>
            <returns>The vector value. This is an array of three
            float values. The first value contains the x component
            of the vector, the second value the y component, and
            the third value the z component.</returns>
            <example>
            The following example gets the first coordinate from the "point"
            field of a Coordinate node and prints it to the console:
            <code>
            Vrml.EAI.Node coordinate = ...;
            Vrml.EAI.Field.EventOutMFVec3f point_changed = (Vrml.EAI.Field.EventOutMFVec3f)coordinate.GetEventOut("point_changed");
            float[] v = point_changed.Get1Value(0);
            System.Console.WriteLine("x = " + v[0] + ", y = " + v[1] + ", z = " + v[2]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFVec3f.Get1Value(System.Int32,System.Single[])">
            <summary>
            Returns one element of the MFVec3f event-out slot.
            </summary>
            <param name="index">The index of the element, starting at 0.</param>
            <param name="value">
            An array of at least three float values that gets filled
            with the vector. The first value gets filled with the
            x component of the vector, the second value with
            the y component, and the third value with the z component.
            </param>
            <example>
            The following example gets the first coordinate from the "point"
            field of a Coordinate node and prints it to the console:
            <code>
            Vrml.EAI.Node coordinate = ...;
            Vrml.EAI.Field.EventOutMFVec3f point_changed = (Vrml.EAI.Field.EventOutMFVec3f)coordinate.GetEventOut("point_changed");
            float[] v = new float[3];
            point_changed.Get1Value(0, v);
            System.Console.WriteLine("x = " + v[0] + ", y = " + v[1] + ", z = " + v[2]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutMFVec3f.#ctor">
            <summary>
            Default Constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventOut(System.String)">Node.GetEventOut</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventOutSFBool">
            <summary>
            Reference to a SFBool event-out slot.
            </summary>
            <remarks>
            Use this class to read values from SFBool event-out slots.
            </remarks>
            <example>
            The following example demonstrates how to check if a
            Viewpoint is currently bound:
            <code>
            Vrml.EAI.Node viewpoint = ...;
            Vrml.EAI.Field.EventOutSFBool isBound = (Vrml.EAI.Field.EventOutSFBool)viewpoint.GetEventOut("isBound");
            if (isBound.GetValue() == true)
                System.Console.WriteLine("Viewpoint is bound");
            else
                System.Console.WriteLine("Viewpoint is not bound");
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFBool.GetValue">
            <summary>
            Returns the current value of the SFBool event-out slot.
            </summary>
            <returns>The boolean value.</returns>
            <example>
            The following example demonstrates how to check if a
            Viewpoint is currently bound:
            <code>
            Vrml.EAI.Node viewpoint = ...;
            Vrml.EAI.Field.EventOutSFBool isBound = (Vrml.EAI.Field.EventOutSFBool)viewpoint.GetEventOut("isBound");
            if (isBound.GetValue() == true)
                System.Console.WriteLine("Viewpoint is bound");
            else
                System.Console.WriteLine("Viewpoint is not bound");
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFBool.#ctor">
            <summary>
            Default Constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventOut(System.String)">Node.GetEventOut</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventOutSFColor">
            <summary>
            Reference to a SFColor event-out slot.
            </summary>
            <remarks>
            Use this class to read values from SFColor event-out slots.
            </remarks>
            <example>
            The following example demonstrates how to get the color of
            an object:
            <code>
            Vrml.EAI.Node material = ...;
            Vrml.EAI.Field.EventOutSFColor diffuseColor_changed = (Vrml.EAI.Field.EventOutSFColor)material.GetEventOut("diffuseColor_changed");
            float[] color = diffuseColor_changed.GetValue();
            System.Console.WriteLine("red = " + color[0] + ", green = " + color[1] + ", blue = " + color[2]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFColor.GetValue">
            <summary>
            Returns the current value of the SFColor event-out slot.
            </summary>
            <returns>
            An array of three float values that contain the red, green
            and blue color component. A value of 0 means no intensity,
            and a value of one means full intensity.
            </returns>
            <example>
            The following example demonstrates how to get the color of
            an object:
            <code>
            Vrml.EAI.Node material = ...;
            Vrml.EAI.Field.EventOutSFColor diffuseColor_changed = (Vrml.EAI.Field.EventOutSFColor)material.GetEventOut("diffuseColor_changed");
            float[] color = diffuseColor_changed.GetValue();
            System.Console.WriteLine("red = " + color[0] + ", green = " + color[1] + ", blue = " + color[2]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFColor.GetValue(System.Single[])">
            <summary>
            Returns the current value of the SFColor event-out slot.
            </summary>
            <param name="value">
            An array of at least three float values whose first three
            elements get filled with the red, green and blue color
            component. A value of 0 means no intensity, and a value of
            one means full intensity.
            </param>
            <example>
            The following example demonstrates how to get the color of
            an object:
            <code>
            Vrml.EAI.Node material = ...;
            Vrml.EAI.Field.EventOutSFColor diffuseColor_changed = (Vrml.EAI.Field.EventOutSFColor)material.GetEventOut("diffuseColor_changed");
            float[] color = new float[3];
            diffuseColor_changed.GetValue(color);
            System.Console.WriteLine("red = " + color[0] + ", green = " + color[1] + ", blue = " + color[2]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFColor.#ctor">
            <summary>
            Default Constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventOut(System.String)">Node.GetEventOut</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventOutSFFloat">
            <summary>
            Reference to a SFFloat event-out slot.
            </summary>
            <remarks>
            Use this class to read values from SFFloat event-out slots.
            </remarks>
            <example>
            The following example demonstrates how to get the transparency of
            an object:
            <code>
            Vrml.EAI.Node material = ...;
            Vrml.EAI.Field.EventOutSFFloat transparency_changed = (Vrml.EAI.Field.EventOutSFFloat)material.GetEventOut("transparency_changed");
            System.Console.WriteLine("transparency = " + transparency_changed.GetValue());
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFFloat.GetValue">
            <summary>
            Returns the current value of the SFFloat event-out slot.
            </summary>
            <returns>The float value.</returns>
            <example>
            The following example demonstrates how to get the transparency of
            an object:
            <code>
            Vrml.EAI.Node material = ...;
            Vrml.EAI.Field.EventOutSFFloat transparency_changed = (Vrml.EAI.Field.EventOutSFFloat)material.GetEventOut("transparency_changed");
            System.Console.WriteLine("transparency = " + transparency_changed.GetValue());
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFFloat.#ctor">
            <summary>
            Default Constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventOut(System.String)">Node.GetEventOut</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventOutSFImage">
            <summary>
            Reference to a SFImage event-out slot.
            </summary>
            <remarks>
            Use this class to read values from SFImage event-out slots.
            </remarks>
            <example>
            The following example gets the image field of a PixelTexture node and writes
            the color components of all pixels to the console:
            <code>
            Vrml.EAI.Node pixelTexture = ...;
            Vrml.EAI.Field.EventOutSFImage image_changed = (Vrml.EAI.Field.EventOutSFImage)pixelTexture.GetEventOut("image_changed");
            int width = image_changed.GetWidth();
            System.Console.WriteLine("width = " + width + " pixels");
            int height = image_changed.GetHeight();
            System.Console.WriteLine("height = " + height + " pixels");
            int[] pixels = image_changed.GetPixels();
            int intensity, red, green, blue, alpha, i;
            switch (image_changed.GetComponents())
            {
                case 1:
                    System.Console.WriteLine("components = 1 (intensity)");
                    i = 0;
                    for (int y = 0; y &lt; height; ++y)
                        for (int x = 0; x &lt; width; ++x)
                        {
                            System.Console.Write("pixel @ x = " + x + ", y = " + y + ": ");
                            intensity = pixels[i] &amp; 0xff;
                            System.Console.WriteLine("intensity = " + intensity);
                            ++i;
                        }
                    break;
                case 2:
                    System.Console.WriteLine("components = 2 (intensity, alpha)");
                    i = 0;
                    for (int y = 0; y &lt; height; ++y)
                        for (int x = 0; x &lt; width; ++x)
                        {
                            System.Console.Write("pixel @ x = " + x + ", y = " + y + ": ");
                            intensity = (pixels[i] >> 8) &amp; 0xff;
                            alpha = pixels[i] &amp; 0xff;
                            System.Console.WriteLine("intensity = " + intensity + ", alpha = " + alpha);
                            ++i;
                        }
                    break;
                case 3:
                    System.Console.WriteLine("components = 3 (red, green, blue)");
                    i = 0;
                    for (int y = 0; y &lt; height; ++y)
                        for (int x = 0; x &lt; width; ++x)
                        {
                            System.Console.Write("pixel @ x = " + x + ", y = " + y + ": ");
                            red = (pixels[i] >> 16) &amp; 0xff;
                            green = (pixels[i] >> 8) &amp; 0xff;
                            blue = pixels[i] &amp; 0xff;
                            System.Console.WriteLine("red = " + red + ", green = " + green + ", blue = " + blue);
                            ++i;
                        }
                    break;
                case 4:
                    System.Console.WriteLine("components = 4 (red, green, blue, alpha)");
                    i = 0;
                    for (int y = 0; y &lt; height; ++y)
                        for (int x = 0; x &lt; width; ++x)
                        {
                            System.Console.Write("pixel @ x = " + x + ", y = " + y + ": ");
                            red = (pixels[i] >> 24) &amp; 0xff;
                            green = (pixels[i] >> 16) &amp; 0xff;
                            blue = (pixels[i] >> 8) &amp; 0xff;
                            alpha = pixels[i] &amp; 0xff;
                            System.Console.WriteLine("red = " + red + ", green = " + green + ", blue = " + blue + ", alpha = " + alpha);
                            ++i;
                        }
                   break;
            }
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFImage.GetWidth">
            <summary>
            Returns the width of the image.
            </summary>
            <returns>
            The width of the image, in pixels.
            </returns>
            <example>
            The following example demonstrates how to get the width of
            an image:
            <code>
            Vrml.EAI.Node pixelTexture = ...;
            Vrml.EAI.Field.EventOutSFImage image_changed = (Vrml.EAI.Field.EventOutSFImage)pixelTexture.GetEventOut("image_changed");
            System.Console.WriteLine("width = " + image_changed.GetWidth() + " pixels");
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFImage.GetHeight">
            <summary>
            Returns the height of the image.
            </summary>
            <returns>
            The height of the image, in pixels.
            </returns>
            <example>
            The following example demonstrates how to get the height of
            an image:
            <code>
            Vrml.EAI.Node pixelTexture = ...;
            Vrml.EAI.Field.EventOutSFImage image_changed = (Vrml.EAI.Field.EventOutSFImage)pixelTexture.GetEventOut("image_changed");
            System.Console.WriteLine("height = " + image_changed.GetHeight() + " pixels");
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFImage.GetComponents">
            <summary>
            Returns the number of components of the image.
            </summary>
            <returns>
            The number of components. This is a number between
            1 and 4, inclusively. Greyscale images have one component
            (intensity). Greyscale images with an alpha channel have
            two components (intensity and alpha). Color images have
            three components (red, green and blue). Color images with
            an alpha channel have 4 components (red, green, blue and
            alpha).
            </returns>
            <example>
            The following example demonstrates how to get the number of
            color components of an image:
            <code>
            Vrml.EAI.Node pixelTexture = ...;
            Vrml.EAI.Field.EventOutSFImage image_changed = (Vrml.EAI.Field.EventOutSFImage)pixelTexture.GetEventOut("image_changed");
            switch (image_changed.GetComponents())
            {
                case 1:
                    System.Console.WriteLine("components = 1 (intensity)");
                    break;
                case 2:
                    System.Console.WriteLine("components = 2 (intensity, alpha)");
                    break;
                case 3:
                    System.Console.WriteLine("components = 3 (red, green, blue)");
                    break;
                case 4:
                    System.Console.WriteLine("components = 4 (red, green, blue, alpha)");
                    break;
            }
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFImage.GetPixels">
            <summary>
            Returns the pixel values of the image.
            </summary>
            <returns>
            The actual pixel values. This is an array of width x height integer values.
            The pixels are defined left to right, bottom to top, i.e. the first
            pixel is in the lower left corner, and the last pixel is in the upper
            right corner of the image. The value of each color component is between 0
            (no intensity resp. completely transparent) and 255 (full intensity
            resp. completely opaque), inclusively. For one-component images, pixels
            simply consist of a single intensity value, e.g. 0x00 in hexadecimal
            (0 in decimal) for no intensity or 0xff in hexadecimal (256 in decimal)
            for full intensity. For two-component images, pixels consist of an
            intensity value in the upper byte, followed by an alpha value in the
            lower byte, e.g. 0xff80 is semi-transparent full intensity. When you
            have a pixel value, you can get the intensity and the alpha value like
            this: <c>intensity = (pixel &gt;&gt; 8) &amp; 0xff; alpha = pixel &amp; 0xff</c>.
            For three-component images, pixels consist of the red component in the
            highest byte, followed by green and finally blue in the lowest byte,
            e.g. 0xFF0000 is red, 0x00FF00 is green, and 0x0000FF is blue. When
            you have a pixel value, you can get the red, green and blue components like
            this: <c>red = (pixel &gt;&gt; 16) &amp; 0xff; green = (pixel &gt;&gt; 8)
            &amp; 0xff; blue = pixel &amp; 0xff</c>. For four-component images, pixels
            consist of the red component in the highest byte, followed by green, blue
            and finally alpha in the lowest byte, e.g. 0xff000080 is semi-transparent
            red. When you have a pixel value, you can get the red, green, blue and alpha
            components like this: <c>red = (pixel &gt;&gt; 24) &amp; 0xff; green =
            (pixel &gt;&gt; 16) &amp; 0xff; blue = (pixel &gt;&gt; 8) &amp; 0xff;
            alpha = pixel &amp; 0xff</c>.
            </returns>
            <example>
            The following example gets the image field of a PixelTexture node and writes
            the color components of all pixels to the console:
            <code>
            Vrml.EAI.Node pixelTexture = ...;
            Vrml.EAI.Field.EventOutSFImage image_changed = (Vrml.EAI.Field.EventOutSFImage)pixelTexture.GetEventOut("image_changed");
            int width = image_changed.GetWidth();
            System.Console.WriteLine("width = " + width + " pixels");
            int height = image_changed.GetHeight();
            System.Console.WriteLine("height = " + height + " pixels");
            int[] pixels = image_changed.GetPixels();
            int intensity, red, green, blue, alpha, i;
            switch (image_changed.GetComponents())
            {
                case 1:
                    System.Console.WriteLine("components = 1 (intensity)");
                    i = 0;
                    for (int y = 0; y &lt; height; ++y)
                        for (int x = 0; x &lt; width; ++x)
                        {
                            System.Console.Write("pixel @ x = " + x + ", y = " + y + ": ");
                            intensity = pixels[i] &amp; 0xff;
                            System.Console.WriteLine("intensity = " + intensity);
                            ++i;
                        }
                    break;
                case 2:
                    System.Console.WriteLine("components = 2 (intensity, alpha)");
                    i = 0;
                    for (int y = 0; y &lt; height; ++y)
                        for (int x = 0; x &lt; width; ++x)
                        {
                            System.Console.Write("pixel @ x = " + x + ", y = " + y + ": ");
                            intensity = (pixels[i] >> 8) &amp; 0xff;
                            alpha = pixels[i] &amp; 0xff;
                            System.Console.WriteLine("intensity = " + intensity + ", alpha = " + alpha);
                            ++i;
                        }
                    break;
                case 3:
                    System.Console.WriteLine("components = 3 (red, green, blue)");
                    i = 0;
                    for (int y = 0; y &lt; height; ++y)
                        for (int x = 0; x &lt; width; ++x)
                        {
                            System.Console.Write("pixel @ x = " + x + ", y = " + y + ": ");
                            red = (pixels[i] >> 16) &amp; 0xff;
                            green = (pixels[i] >> 8) &amp; 0xff;
                            blue = pixels[i] &amp; 0xff;
                            System.Console.WriteLine("red = " + red + ", green = " + green + ", blue = " + blue);
                            ++i;
                        }
                    break;
                case 4:
                    System.Console.WriteLine("components = 4 (red, green, blue, alpha)");
                    i = 0;
                    for (int y = 0; y &lt; height; ++y)
                        for (int x = 0; x &lt; width; ++x)
                        {
                            System.Console.Write("pixel @ x = " + x + ", y = " + y + ": ");
                            red = (pixels[i] >> 24) &amp; 0xff;
                            green = (pixels[i] >> 16) &amp; 0xff;
                            blue = (pixels[i] >> 8) &amp; 0xff;
                            alpha = pixels[i] &amp; 0xff;
                            System.Console.WriteLine("red = " + red + ", green = " + green + ", blue = " + blue + ", alpha = " + alpha);
                            ++i;
                        }
                   break;
            }
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFImage.GetPixels(System.Int32[])">
            <summary>
            Returns the pixel values of the image.
            </summary>
            <param name="pixels">
            An array of at least width x height integer values that gets filled
            with the pixel values.
            The pixels are defined left to right, bottom to top, i.e. the first
            pixel is in the lower left corner, and the last pixel is in the upper
            right corner of the image. The value of each color component is between 0
            (no intensity resp. completely transparent) and 255 (full intensity
            resp. completely opaque), inclusively. For one-component images, pixels
            simply consist of a single intensity value, e.g. 0x00 in hexadecimal
            (0 in decimal) for no intensity or 0xff in hexadecimal (256 in decimal)
            for full intensity. For two-component images, pixels consist of an
            intensity value in the upper byte, followed by an alpha value in the
            lower byte, e.g. 0xff80 is semi-transparent full intensity. When you
            have a pixel value, you can get the intensity and the alpha value like
            this: <c>intensity = (pixel &gt;&gt; 8) &amp; 0xff; alpha = pixel &amp; 0xff</c>.
            For three-component images, pixels consist of the red component in the
            highest byte, followed by green and finally blue in the lowest byte,
            e.g. 0xFF0000 is red, 0x00FF00 is green, and 0x0000FF is blue. When
            you have a pixel value, you can get the red, green and blue components like
            this: <c>red = (pixel &gt;&gt; 16) &amp; 0xff; green = (pixel &gt;&gt; 8)
            &amp; 0xff; blue = pixel &amp; 0xff</c>. For four-component images, pixels
            consist of the red component in the highest byte, followed by green, blue
            and finally alpha in the lowest byte, e.g. 0xff000080 is semi-transparent
            red. When you have a pixel value, you can get the red, green, blue and alpha
            components like this: <c>red = (pixel &gt;&gt; 24) &amp; 0xff; green =
            (pixel &gt;&gt; 16) &amp; 0xff; blue = (pixel &gt;&gt; 8) &amp; 0xff;
            alpha = pixel &amp; 0xff</c>.
            </param>
            <example>
            The following example gets the image field of a PixelTexture node and writes
            the color components of all pixels to the console:
            <code>
            Vrml.EAI.Node pixelTexture = ...;
            Vrml.EAI.Field.EventOutSFImage image_changed = (Vrml.EAI.Field.EventOutSFImage)pixelTexture.GetEventOut("image_changed");
            int width = image_changed.GetWidth();
            System.Console.WriteLine("width = " + width + " pixels");
            int height = image_changed.GetHeight();
            System.Console.WriteLine("height = " + height + " pixels");
            int[] pixels = new int[width * height];
            image_changed.GetPixels(pixels);
            int intensity, red, green, blue, alpha, i;
            switch (image_changed.GetComponents())
            {
                case 1:
                    System.Console.WriteLine("components = 1 (intensity)");
                    i = 0;
                    for (int y = 0; y &lt; height; ++y)
                        for (int x = 0; x &lt; width; ++x)
                        {
                            System.Console.Write("pixel @ x = " + x + ", y = " + y + ": ");
                            intensity = pixels[i] &amp; 0xff;
                            System.Console.WriteLine("intensity = " + intensity);
                            ++i;
                        }
                    break;
                case 2:
                    System.Console.WriteLine("components = 2 (intensity, alpha)");
                    i = 0;
                    for (int y = 0; y &lt; height; ++y)
                        for (int x = 0; x &lt; width; ++x)
                        {
                            System.Console.Write("pixel @ x = " + x + ", y = " + y + ": ");
                            intensity = (pixels[i] >> 8) &amp; 0xff;
                            alpha = pixels[i] &amp; 0xff;
                            System.Console.WriteLine("intensity = " + intensity + ", alpha = " + alpha);
                            ++i;
                        }
                    break;
                case 3:
                    System.Console.WriteLine("components = 3 (red, green, blue)");
                    i = 0;
                    for (int y = 0; y &lt; height; ++y)
                        for (int x = 0; x &lt; width; ++x)
                        {
                            System.Console.Write("pixel @ x = " + x + ", y = " + y + ": ");
                            red = (pixels[i] >> 16) &amp; 0xff;
                            green = (pixels[i] >> 8) &amp; 0xff;
                            blue = pixels[i] &amp; 0xff;
                            System.Console.WriteLine("red = " + red + ", green = " + green + ", blue = " + blue);
                            ++i;
                        }
                    break;
                case 4:
                    System.Console.WriteLine("components = 4 (red, green, blue, alpha)");
                    i = 0;
                    for (int y = 0; y &lt; height; ++y)
                        for (int x = 0; x &lt; width; ++x)
                        {
                            System.Console.Write("pixel @ x = " + x + ", y = " + y + ": ");
                            red = (pixels[i] >> 24) &amp; 0xff;
                            green = (pixels[i] >> 16) &amp; 0xff;
                            blue = (pixels[i] >> 8) &amp; 0xff;
                            alpha = pixels[i] &amp; 0xff;
                            System.Console.WriteLine("red = " + red + ", green = " + green + ", blue = " + blue + ", alpha = " + alpha);
                            ++i;
                        }
                   break;
            }
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFImage.#ctor">
            <summary>
            Default Constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventOut(System.String)">Node.GetEventOut</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventOutSFInt32">
            <summary>
            Reference to a SFInt32 event-out slot.
            </summary>
            <remarks>
            Use this class to read values from SFInt32 event-out slots.
            </remarks>
            <example>
            The following example demonstrates how to get the currently
            selected choice of a Switch node:
            <code>
            Vrml.EAI.Node switchNode = ...;
            Vrml.EAI.Field.EventOutSFInt32 whichChoice_changed = (Vrml.EAI.Field.EventOutSFInt32)switchNode.GetEventOut("whichChoice_changed");
            System.Console.WriteLine("choice = " + whichChoice_changed.GetValue());
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFInt32.GetValue">
            <summary>
            Returns the current value of the SFInt32 event-out slot.
            </summary>
            <returns>The integer value.</returns>
            <example>
            The following example demonstrates how to get the currently
            selected choice of a Switch node:
            <code>
            Vrml.EAI.Node switchNode = ...;
            Vrml.EAI.Field.EventOutSFInt32 whichChoice_changed = (Vrml.EAI.Field.EventOutSFInt32)switchNode.GetEventOut("whichChoice_changed");
            System.Console.WriteLine("choice = " + whichChoice_changed.GetValue());
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFInt32.#ctor">
            <summary>
            Default Constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventOut(System.String)">Node.GetEventOut</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventOutSFNode">
            <summary>
            Reference to a SFNode event-out slot.
            </summary>
            <remarks>
            Use this class to read values from SFNode event-out slots.
            </remarks>
            <example>
            The following example demonstrates how to get the geometry
            node from a Shape node and prints the type of geometry to the
            console:
            <code>
            Vrml.EAI.Node shapeNode = ...;
            Vrml.EAI.Field.EventOutSFNode geometry_changed = (Vrml.EAI.Field.EventOutSFNode)shapeNode.GetEventOut("geometry_changed");
            Vrml.EAI.Node geometry = geometry_changed.GetValue();
            if (geometry == null)
                System.Console.WriteLine("geometry = null");
            else
                System.Console.WriteLine("geometry = " + geometry.Type);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFNode.GetValue">
            <summary>
            Returns the current value of the SFNode event-out slot.
            </summary>
            <returns>
            The node. This can be null when there currently is no
            node in the event-out slot.
            </returns>
            <example>
            The following example demonstrates how to get the geometry
            node from a Shape node and prints the type of geometry to the
            console:
            <code>
            Vrml.EAI.Node shapeNode = ...;
            Vrml.EAI.Field.EventOutSFNode geometry_changed = (Vrml.EAI.Field.EventOutSFNode)shapeNode.GetEventOut("geometry_changed");
            Vrml.EAI.Node geometry = geometry_changed.GetValue();
            if (geometry == null)
                System.Console.WriteLine("geometry = null");
            else
                System.Console.WriteLine("geometry = " + geometry.Type);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFNode.#ctor">
            <summary>
            Default Constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventOut(System.String)">Node.GetEventOut</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventOutSFRotation">
            <summary>
            Reference to a SFRotation event-out slot.
            </summary>
            <remarks>
            Use this class to read values from SFRotation event-out slots.
            </remarks>
            <example>
            The following example demonstrates how to get the current
            orientation of the active Viewpoint from a ProximitySensor,
            and prints it to the console:
            <code>
            Vrml.EAI.Node proximitySensor = ...;
            Vrml.EAI.Field.EventOutSFRotation orientation_changed = (Vrml.EAI.Field.EventOutSFRotation)proximitySensor.GetEventOut("orientation_changed");
            float[] rotation = orientation_changed.GetValue();
            System.Console.WriteLine("x = " + rotation[0] + ", y = " + rotation[1] + ", z = " + rotation[2] + ", angle = " + rotation[3]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFRotation.GetValue">
            <summary>
            Returns the current value of the SFRotation event-out slot.
            </summary>
            <returns>
            The rotation as an array of four floats. The first three elements
            contain the x, y and z coordinate of the rotation axis. The fourth
            element contains the rotation angle, in radians.
            </returns>
            <example>
            The following example demonstrates how to get the current
            orientation of the active Viewpoint from a ProximitySensor,
            and prints it to the console:
            <code>
            Vrml.EAI.Node proximitySensor = ...;
            Vrml.EAI.Field.EventOutSFRotation orientation_changed = (Vrml.EAI.Field.EventOutSFRotation)proximitySensor.GetEventOut("orientation_changed");
            float[] rotation = orientation_changed.GetValue();
            System.Console.WriteLine("x = " + rotation[0] + ", y = " + rotation[1] + ", z = " + rotation[2] + ", angle = " + rotation[3]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFRotation.GetValue(System.Single[])">
            <summary>
            Returns the current value of the SFRotation event-out slot.
            </summary>
            <param name="value">
            An array of at least four float elements that gets filled with the
            rotation. The first three elements get filled with the x, y and z
            coordinate of the rotation axis. The fourth element gets filled
            with the rotation angle, in radians.
            </param>
            <example>
            The following example demonstrates how to get the current
            orientation of the active Viewpoint from a ProximitySensor,
            and prints it to the console:
            <code>
            Vrml.EAI.Node proximitySensor = ...;
            Vrml.EAI.Field.EventOutSFRotation orientation_changed = (Vrml.EAI.Field.EventOutSFRotation)proximitySensor.GetEventOut("orientation_changed");
            float[] rotation = new float[4];
            orientation_changed.GetValue(rotation);
            System.Console.WriteLine("x = " + rotation[0] + ", y = " + rotation[1] + ", z = " + rotation[2] + ", angle = " + rotation[3]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFRotation.#ctor">
            <summary>
            Default Constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventOut(System.String)">Node.GetEventOut</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventOutSFString">
            <summary>
            Reference to a SFString event-out slot.
            </summary>
            <remarks>
            Use this class to read values from SFString event-out slots.
            </remarks>
            <example>
            The following example demonstrates how to get the description
            field of an Anchor node:
            <code>
            Vrml.EAI.Node anchor = ...;
            Vrml.EAI.Field.EventOutSFString description_changed = (Vrml.EAI.Field.EventOutSFString)anchor.GetEventOut("description_changed");
            System.Console.WriteLine("description = " + description_changed.GetValue());
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFString.GetValue">
            <summary>
            Returns the current value of the SFString event-out slot.
            </summary>
            <returns>The string.</returns>
            <example>
            The following example demonstrates how to get the description
            field of an Anchor node:
            <code>
            Vrml.EAI.Node anchor = ...;
            Vrml.EAI.Field.EventOutSFString description_changed = (Vrml.EAI.Field.EventOutSFString)anchor.GetEventOut("description_changed");
            System.Console.WriteLine("description = " + description_changed.GetValue());
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFString.#ctor">
            <summary>
            Default Constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventOut(System.String)">Node.GetEventOut</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventOutSFTime">
            <summary>
            Reference to a SFTime event-out slot.
            </summary>
            <remarks>
            Use this class to read values from SFTime event-out slots.
            </remarks>
            <example>
            The following example demonstrates how to get the current
            time stamp from a TimeSensor node:
            <code>
            Vrml.EAI.Node timeSensor = ...;
            Vrml.EAI.Field.EventOutSFTime time = (Vrml.EAI.Field.EventOutSFTime)timeSensor.GetEventOut("time");
            System.DateTime t = new System.DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc).AddSeconds(time.GetValue()).ToLocalTime();
            System.Console.WriteLine("Time = " + t);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFTime.GetValue">
            <summary>
            Returns the current value of the SFTime event-out slot.
            </summary>
            <returns>
            The time value. This is a double value containing the
            number of seconds since January the 1st, 1970, 00:00:00 GMT.
            </returns>
            <example>
            The following example demonstrates how to get the current
            time stamp from a TimeSensor node:
            <code>
            Vrml.EAI.Node timeSensor = ...;
            Vrml.EAI.Field.EventOutSFTime time = (Vrml.EAI.Field.EventOutSFTime)timeSensor.GetEventOut("time");
            System.DateTime t = new System.DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc).AddSeconds(time.GetValue()).ToLocalTime();
            System.Console.WriteLine("Time = " + t);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFTime.#ctor">
            <summary>
            Default Constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventOut(System.String)">Node.GetEventOut</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventOutSFVec2f">
            <summary>
            Reference to a SFVec2f event-out slot.
            </summary>
            <remarks>
            Use this class to read values from SFVec2f event-out slots.
            </remarks>
            <example>
            The following example demonstrates how to get the texture
            coordinate of the hit point from a TouchSensor node:
            <code>
            Vrml.EAI.Node touchSensor = null;
            Vrml.EAI.Field.EventOutSFVec2f hitTexCoord_changed = (Vrml.EAI.Field.EventOutSFVec2f)touchSensor.GetEventOut("hitTexCoord_changed");
            float[] coord = hitTexCoord_changed.GetValue();
            System.Console.WriteLine("x = " + coord[0] + ", y = " + coord[1]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFVec2f.GetValue">
            <summary>
            Returns the current value of the SFVec2f event-out slot.
            </summary>
            <returns>
            The vector as an array of two float elements. The first element
            contains the x component, and the second element the y component.
            </returns>
            <example>
            The following example demonstrates how to get the texture
            coordinate of the hit point from a TouchSensor node:
            <code>
            Vrml.EAI.Node touchSensor = null;
            Vrml.EAI.Field.EventOutSFVec2f hitTexCoord_changed = (Vrml.EAI.Field.EventOutSFVec2f)touchSensor.GetEventOut("hitTexCoord_changed");
            float[] coord = hitTexCoord_changed.GetValue();
            System.Console.WriteLine("x = " + coord[0] + ", y = " + coord[1]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFVec2f.GetValue(System.Single[])">
            <summary>
            Returns the current value of the SFVec2f event-out slot.
            </summary>
            <param name="value">
            An array of at least two float elements that gets filled with
            the components of the vector. The first element gets filled with
            the x component, and the second element with the y component.
            </param>
            <example>
            The following example demonstrates how to get the texture
            coordinate of the hit point from a TouchSensor node:
            <code>
            Vrml.EAI.Node touchSensor = null;
            Vrml.EAI.Field.EventOutSFVec2f hitTexCoord_changed = (Vrml.EAI.Field.EventOutSFVec2f)touchSensor.GetEventOut("hitTexCoord_changed");
            float[] coord = new float[2];
            hitTexCoord_changed.GetValue(coord);
            System.Console.WriteLine("x = " + coord[0] + ", y = " + coord[1]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFVec2f.#ctor">
            <summary>
            Default Constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventOut(System.String)">Node.GetEventOut</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.EventOutSFVec3f">
            <summary>
            Reference to a SFVec3f event-out slot.
            </summary>
            <remarks>
            Use this class to read values from SFVec3f event-out slots.
            </remarks>
            <example>
            The following example demonstrates how to get the hit point from
            a TouchSensor node:
            <code>
            Vrml.EAI.Node touchSensor = null;
            Vrml.EAI.Field.EventOutSFVec3f hitPoint_changed = (Vrml.EAI.Field.EventOutSFVec3f)touchSensor.GetEventOut("hitPoint_changed");
            float[] coord = hitPoint_changed.GetValue();
            System.Console.WriteLine("x = " + coord[0] + ", y = " + coord[1] + ", z = " + coord[2]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFVec3f.GetValue">
            <summary>
            Returns the current value of the SFVec3f event-out slot.
            </summary>
            <returns>
            The vector as an array of three float elements. The first element
            contains the x component, and the second element the y component,
            and the third element the z component.
            </returns>
            <example>
            The following example demonstrates how to get the hit point from
            a TouchSensor node:
            <code>
            Vrml.EAI.Node touchSensor = null;
            Vrml.EAI.Field.EventOutSFVec3f hitPoint_changed = (Vrml.EAI.Field.EventOutSFVec3f)touchSensor.GetEventOut("hitPoint_changed");
            float[] coord = hitPoint_changed.GetValue();
            System.Console.WriteLine("x = " + coord[0] + ", y = " + coord[1] + ", z = " + coord[2]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFVec3f.GetValue(System.Single[])">
            <summary>
            Returns the current value of the SFVec3f event-out slot.
            </summary>
            <param name="value">
            An array of at least three float elements that gets filled with
            the components of the vector. The first element gets filled with
            the x component, the second element with the y component, and the
            third element with the z component.
            </param>
            <example>
            The following example demonstrates how to get the hit point from
            a TouchSensor node:
            <code>
            Vrml.EAI.Node touchSensor = null;
            Vrml.EAI.Field.EventOutSFVec3f hitPoint_changed = (Vrml.EAI.Field.EventOutSFVec3f)touchSensor.GetEventOut("hitPoint_changed");
            float[] coord = new float[3];
            hitPoint_changed.GetValue(coord);
            System.Console.WriteLine("x = " + coord[0] + ", y = " + coord[1] + ", z = " + coord[2]);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.EventOutSFVec3f.#ctor">
            <summary>
            Default Constructor.
            </summary>
            <remarks>
            This method is protected, i.e. you cannot create new instances of this class.
            The only way to get instances is via the
            <see cref="M:Vrml.EAI.Node.GetEventOut(System.String)">Node.GetEventOut</see> method.
            </remarks>
        </member>
        <member name="T:Vrml.EAI.Field.InvalidEventInException">
            <summary>
            Exception that gets thrown when you try to get an unknown
            event-in slot from a node.
            </summary>
            <remarks>
            This exception gets thrown by
            <see cref="M:Vrml.EAI.Node.GetEventIn(System.String)">Node.GetEventIn</see> when you
            specify an event-in slot name that does not exist in the node.
            </remarks>
            <example>
            The following example demonstrates how to catch an
            InvalidEventInException and print an error message to the
            console:
            <code>
            try
            {
                ...
            }
            catch (Vrml.EAI.Field.InvalidEventInException ex)
            {
                System.Console.WriteLine(ex);
            }
            </code>
            </example>
        </member>
        <member name="T:Vrml.EAI.Field.InvalidFieldException">
            <summary>
            Exception that gets thrown when you try to get an unknown
            event-in or event-out slot from a node.
            </summary>
            <remarks>
            This exception gets thrown by
            <see cref="M:Vrml.EAI.Node.GetEventOut(System.String)">Node.GetEventOut</see> and
            <see cref="M:Vrml.EAI.Node.GetEventIn(System.String)">Node.GetEventIn</see> when you
            specify a field name that does not exist in the node.
            </remarks>
            <example>
            The following example demonstrates how to catch all
            InvalidFieldExceptions and print an error message to the
            console:
            <code>
            try
            {
                ...
            }
            catch (Vrml.EAI.Field.InvalidFieldException ex)
            {
                System.Console.WriteLine(ex);
            }
            </code>
            </example>
        </member>
        <member name="T:Vrml.EAI.VrmlException">
            <summary>
            Ancestor of all Exception thrown by the EAI.
            </summary>
            <remarks>
            This exception gets never thrown directly. By specifying this
            Exception in a catch clause, you can handle all EAI Exceptions
            regardless of their type.
            </remarks>
            <example>
            The following example demonstrates how to catch all
            EAI exceptions and print an error message to the
            console:
            <code>
            try
            {
                ...
            }
            catch (Vrml.EAI.VrmlException ex)
            {
                System.Console.WriteLine(ex);
            }
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.VrmlException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Vrml.EAI.VrmlException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="msg">Message that describes the error.</param>
        </member>
        <member name="M:Vrml.EAI.Field.InvalidFieldException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Vrml.EAI.Field.InvalidFieldException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">Message that describes the error.</param>
        </member>
        <member name="M:Vrml.EAI.Field.InvalidEventInException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Vrml.EAI.Field.InvalidEventInException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">Message that describes the error.</param>
        </member>
        <member name="T:Vrml.EAI.Field.InvalidEventOutException">
            <summary>
            Exception that gets thrown when you try to get an unknown
            event-out slot from a node.
            </summary>
            <remarks>
            This exception gets thrown by
            <see cref="M:Vrml.EAI.Node.GetEventOut(System.String)">Node.GetEventOut</see> when you
            specify an event-out slot name that does not exist in the node.
            </remarks>
            <example>
            The following example demonstrates how to catch an
            InvalidEventOutException and print an error message to the
            console:
            <code>
            try
            {
                ...
            }
            catch (Vrml.EAI.Field.InvalidEventOutException ex)
            {
                System.Console.WriteLine(ex);
            }
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Field.InvalidEventOutException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Vrml.EAI.Field.InvalidEventOutException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">Message that describes the error.</param>
        </member>
        <member name="T:Vrml.EAI.Browser">
            <summary>
            Reference to a Browser instance.
            </summary>
            <remarks>
            <para>
            The Browser object is the central interface to the X3D browser
            and the scene currently displayed by the browser. You cannot
            create instances of this interface directly, instead you have to
            use one of the methods of the <see cref="T:Vrml.EAI.BrowserFactory"/> class.
            </para>
            <para>
            When you do not need the Browser object anymore, you should call
            its Dispose method to release all resources as soon as possible.
            </para>
            </remarks>
            <example>
            The following example demonstrates how to create a new instance
            of the Browser interface:
            <code>
            System.Net.IPAddress address = System.Net.Dns.GetHostByName("localhost").AddressList[0];
            Vrml.EAI.Browser browser = Vrml.EAI.BrowserFactory.GetBrowser(address, 4848);
            ...
            browser.Dispose();
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Browser.ReplaceWorld(Vrml.EAI.Node[])">
            <summary>
            Replaces the currently loaded scene with the given nodes.
            </summary>
            <param name="nodes">The nodes of the new scene</param>
            <example>
            The following example demonstrates how to replace the
            currently loaded scene with a box:
            <code>
            Vrml.EAI.Browser browser = ...;
            Vrml.EAI.Node[] nodes = browser.CreateVrmlFromString("Shape { geometry Box {} }");
            browser.ReplaceWorld(nodes);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Browser.LoadURL(System.String[],System.String[])">
            <summary>
            Loads a new scene.
            </summary>
            <param name="url">
            URLs that contain the new scene. The browser consecutively
            tries to load the scene from these URLs. It stops as soon as
            a download succeeds.
            </param>
            <param name="parameter">
            Contains additional information to be interpreted by the
            browser. Each string shall consist of "key=value" pairs. The
            VRML standard does not specify any of these parameters, so all
            parameters are browser-specific.
            </param>
            <example>
            The following example demonstrates how to load a scene "Scene.wrl"
            from the current working directory:
            <code>
            Vrml.EAI.Browser browser = ...;
            string[] urls = { "Scene.wrl" };
            string[] parameters = new string[0];
            browser.LoadURL(urls, parameters);
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Browser.CreateVrmlFromString(System.String)">
            <summary>
            Creates new nodes from a VRML source string.
            </summary>
            <remarks>
            The newly created nodes are not part of the scene graph, i.e.
            you have to call the <see cref="M:Vrml.EAI.Browser.ReplaceWorld(Vrml.EAI.Node[])"/> method, or you
            have to send them to a <see cref="T:Vrml.EAI.Field.EventInSFNode">SFNode</see>
            or <see cref="T:Vrml.EAI.Field.EventInMFNode">MFNode</see> event-in slot
            before they show any effect.
            </remarks>
            <param name="vrmlString">
            A string in VRML (classic) encoding that contains a textual
            representation of the nodes and their fields.
            </param>
            <returns>The root nodes of the scene</returns>
            <example>
            The following example demonstrates how to create a box shape:
            <code>
            Vrml.EAI.Browser browser = ...;
            Vrml.EAI.Node[] nodes = browser.CreateVrmlFromString("Shape { geometry Box {} }");
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Browser.CreateVrmlFromURL(System.String[],Vrml.EAI.Node,System.String)">
            <summary>
            Creates new nodes from an URL.
            </summary>
            <remarks>
            This method works asynchronously, i.e. it returns immediately
            without waiting for the actual download. As soon as the new
            nodes are available, they're sent to an
            <see cref="T:Vrml.EAI.Field.EventInMFNode">MFNode</see> event-in slot.
            </remarks>
            <param name="url">
            URLs of X3D documents that contain the new nodes. The browser
            consecutively tries to load the scene from these URLs. It stops
            as soon as a download succeeds.
            </param>
            <param name="node">
            The node that the new nodes become children of.
            </param>
            <param name="eventIn">
            The name of the <see cref="T:Vrml.EAI.Field.EventInMFNode">MFNode</see>
            event-in slot the new nodes get sent to.
            </param>
            <example>
            The following example demonstrates how to create new nodes
            from the file "Subscene.wrl" in the current working directory
            and send them to the addChildren event-in slot of a Group
            node:
            <code>
            Vrml.EAI.Browser browser = ...;
            Vrml.EAI.Node group = ...;
            string[] urls = { "Subscene.wrl" };
            browser.CreateVrmlFromURL(urls, group, "addChildren");
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Browser.GetNode(System.String)">
            <summary>
            Returns a named node.
            </summary>
            <remarks>
            This method allows to retrieve references to nodes in the
            currently loaded 3D scene. To do that, you have to give the
            nodes names (via the VRML DEF mechanism).
            </remarks>
            <param name="name">The name of the node.</param>
            <returns>The node.</returns>
            <example>
            The following example demonstrates how to get a reference
            to a Group node named "root" (which is defined in the VRML
            scene as "DEF root Group {}"):
            <code>
            Vrml.EAI.Browser browser = ...;
            Vrml.EAI.Node group = browser.GetNode("root");
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Browser.AddRoute(Vrml.EAI.Node,System.String,Vrml.EAI.Node,System.String)">
            <summary>
            Creates a new route.
            </summary>
            <param name="fromNode">
            The node that sends events.
            </param>
            <param name="eventOut">
            The name of the event-out slot that sends events.
            </param>
            <param name="toNode">
            The node that receives events.
            </param>
            <param name="eventIn">
            The name of the event-in slot that receives events.
            </param>
            <example>
            The following example demonstrates how to create a
            route from the fraction_changed event-out slot of a
            TimeSensor node to the set_fraction event-in slot of
            a PositionInterpolator node:
            <code>
            Vrml.EAI.Browser browser = ...;
            Vrml.EAI.Node timeSensor = ...;
            Vrml.EAI.Node positionInterpolator = ...;
            browser.AddRoute(timeSensor, "fraction_changed", positionInterpolator, "set_fraction");
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Browser.DeleteRoute(Vrml.EAI.Node,System.String,Vrml.EAI.Node,System.String)">
            <summary>
            Removes a route.
            </summary>
            <param name="fromNode">
            The node that sends events.
            </param>
            <param name="eventOut">
            The name of the event-out slot that sends events.
            </param>
            <param name="toNode">
            The node that receives events.
            </param>
            <param name="eventIn">
            The name of the event-in slot that receives events.
            </param>
            <example>
            The following example demonstrates how to remove a
            route from the fraction_changed event-out slot of a
            TimeSensor node to the set_fraction event-in slot of
            a PositionInterpolator node:
            <code>
            Vrml.EAI.Browser browser = ...;
            Vrml.EAI.Node timeSensor = ...;
            Vrml.EAI.Node positionInterpolator = ...;
            browser.DeleteRoute(timeSensor, "fraction_changed", positionInterpolator, "set_fraction");
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Browser.BeginUpdate">
            <summary>
            Starts scene update.
            </summary>
            <remarks>
            <para>
            By default, when you send events to event-in slots in the scene via
            the EAI, each change is processed immediatly. For many applications,
            this is perfectly ok, but there are some drawbacks of that approach.
            First of all, it is quite inefficient when you have to send many events
            at once. For each event, the EAI has to send the data value to the
            X3D browser, and then has to wait for the reply, which takes some time,
            especially when communicating via a network. Furthermore, it is
            impossible to send two or more events simultaneously, or to combine
            changes at single elements of a multi-field to a single event. To
            overcome these drawbacks, a pair of two methods exists, BeginUpdate
            and <see cref="M:Vrml.EAI.Browser.EndUpdate"/>.
            </para>
            <para>
            When calling <see cref="M:Vrml.EAI.Browser.EndUpdate"/>, the <see cref="T:Vrml.EAI.Browser"/> object
            stops sending all events immediately, and instead buffers them in
            memory until you call the BeginUpdate method. At that point, all buffered
            events are sent at the same time, and the <see cref="T:Vrml.EAI.Browser"/> object
            starts sending events immediately again.
            </para>
            </remarks>
            <example>
            The following example demonstrates how to apply two transformations
            simulataneously to a scene:
            <code>
            Vrml.EAI.Browser browser = ...;
            Vrml.EAI.Field.EventInSFVec3f set_translation1 = ...;
            Vrml.EAI.Field.EventInSFVec3f set_translation2 = ...;
            float[] translation1 = ...;
            float[] translation2 = ...;
            browser.EndUpdate();
                set_translation1.SetValue(translation1);
                set_translation2.SetValue(translation2);
            browser.BeginUpdate();
            </code>
            </example>
            <seealso cref="M:Vrml.EAI.Browser.EndUpdate"/>
        </member>
        <member name="M:Vrml.EAI.Browser.EndUpdate">
            <summary>
            Stops scene update.
            </summary>
            <remarks>
            <para>
            By default, when you send events to event-in slots in the scene via
            the EAI, each change is processed immediatly. For many applications,
            this is perfectly ok, but there are some drawbacks of that approach.
            First of all, it is quite inefficient when you have to send many events
            at once. For each event, the EAI has to send the data value to the
            X3D browser, and then has to wait for the reply, which takes some time,
            especially when communicating via a network. Furthermore, it is
            impossible to send two or more events simultaneously, or to combine
            changes at single elements of a multi-field to a single event. To
            overcome these drawbacks, a pair of two methods exists,
            <see cref="M:Vrml.EAI.Browser.BeginUpdate"/> and EndUpdate.
            </para>
            <para>
            When calling EndUpdate, the <see cref="T:Vrml.EAI.Browser"/> object stops sending
            all events immediately, and instead buffers them in memory until you
            call the <see cref="M:Vrml.EAI.Browser.BeginUpdate"/> method. At that point, all buffered
            events are sent at the same time, and the <see cref="T:Vrml.EAI.Browser"/> object
            starts sending events immediately again.
            </para>
            </remarks>
            <example>
            The following example demonstrates how to apply two transformations
            simulataneously to a scene:
            <code>
            Vrml.EAI.Browser browser = ...;
            Vrml.EAI.Field.EventInSFVec3f set_translation1 = ...;
            Vrml.EAI.Field.EventInSFVec3f set_translation2 = ...;
            float[] translation1 = ...;
            float[] translation2 = ...;
            browser.EndUpdate();
                set_translation1.SetValue(translation1);
                set_translation2.SetValue(translation2);
            browser.BeginUpdate();
            </code>
            </example>
            <seealso cref="M:Vrml.EAI.Browser.BeginUpdate"/>
        </member>
        <member name="M:Vrml.EAI.Browser.AddBrowserDelegate(Vrml.EAI.Event.BrowserDelegate)">
             <summary>
             Adds a delegate to the browser (obsolete).
             </summary>
             <param name="browserDelegate">
             The delegate that receives browser events.
             </param>
             <remarks>
             <para>
             You can add methods that conform to the method signature defined
             by the <see cref="T:Vrml.EAI.Event.BrowserDelegate"/> as delegates to the
             <see cref="T:Vrml.EAI.Browser"/> object. These methods get called whenever
             the status of the X3D browser changes.
             </para>
             <para>
             This method is obsolete! Please use <see cref="E:Vrml.EAI.Browser.BrowserEvent"/> instead.
             </para>
             </remarks>
             <example>
             The following example demonstrates how to add a
             method as a browser delegate:
             <code>
             public class MyClass
             {
                 private static void OnBrowserEvent(Vrml.EAI.Event.BrowserEvent evt)
                 {
                     ...
                 }
            
                 public static void Main(string[] args)
                 {
                     ...
                     Vrml.EAI.Browser browser = ...;
                     browser.AddBrowserDelegate(OnBrowserEvent);
                     ...
                     browser.RemoveBrowserDelegate(OnBrowserEvent);
                     ...
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Vrml.EAI.Browser.RemoveBrowserDelegate(Vrml.EAI.Event.BrowserDelegate)">
             <summary>
             Removes a delegate from the browser (obsolete).
             </summary>
             <param name="browserDelegate">
             The delegate.
             </param>
             <remarks>
             <para>
             This method allows to remove methods previously added by the
             <see cref="M:Vrml.EAI.Browser.AddBrowserDelegate(Vrml.EAI.Event.BrowserDelegate)"/> method when you do not longer
             want to get notified of browser events.
             </para>
             <para>
             This method is obsolete! Please use <see cref="E:Vrml.EAI.Browser.BrowserEvent"/> instead.
             </para>
             </remarks>
             <example>
             The following example demonstrates how to remove a
             method as a browser delegate:
             <code>
             public class MyClass
             {
                 private static void OnBrowserEvent(Vrml.EAI.Event.BrowserEvent evt)
                 {
                     ...
                 }
            
                 public static void Main(string[] args)
                 {
                     ...
                     Vrml.EAI.Browser browser = ...;
                     browser.AddBrowserDelegate(OnBrowserEvent);
                     ...
                     browser.RemoveBrowserDelegate(OnBrowserEvent);
                     ...
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Vrml.EAI.Browser.Dispose">
            <summary>
            Releases all resources held by this browser object.
            </summary>
            <remarks>
            You should call this method when you do not need access to
            a browser anymore. Calling it is optional - it gets automatically
            called by the destructor of this class - but it is recommended
            to call this method manually because it allows the system to
            release resources held by this object as soon as possible. The
            browser object is not valid anymore after calling this method -
            do not call any method of the browser object, or you will get an
            <see cref="T:Vrml.EAI.InvalidBrowserException"/>.
            </remarks>
        </member>
        <member name="P:Vrml.EAI.Browser.Name">
            <summary>
            The name of the X3D browser.
            </summary>
            <value>
            The name of the X3D browser. The contents of this string are
            unspecified and browser-specific.
            </value>
            <remarks>This is a read-only property.</remarks>
            <example>
            The following example prints the name of the browser to the
            console:
            <code>
            Vrml.EAI.Browser browser = ...;
            System.Console.WriteLine("Browser.Name = \"" + browser.Name + '"');
            </code>
            </example>
        </member>
        <member name="P:Vrml.EAI.Browser.Version">
            <summary>
            The version of the X3D browser.
            </summary>
            <value>
            The version of the X3D browser. The contents of this string are
            unspecified and browser-specific.
            </value>
            <remarks>This is a read-only property.</remarks>
            <example>
            The following example prints the version of the browser to the
            console:
            <code>
            Vrml.EAI.Browser browser = ...;
            System.Console.WriteLine("Browser.Version = \"" + browser.Version + '"');
            </code>
            </example>
        </member>
        <member name="P:Vrml.EAI.Browser.CurrentSpeed">
            <summary>
            The current navigation speed.
            </summary>
            <value>
            The current navigation speed, i.e. the speed of the currently
            bound Viewpoint, in units per second. This can be 0 when the
            browser does not support to provide this information.
            </value>
            <remarks>This is a read-only property.</remarks>
            <example>
            The following example prints the current navigation speed to the
            console:
            <code>
            Vrml.EAI.Browser browser = ...;
            System.Console.WriteLine("Browser.CurrentSpeed = " + browser.CurrentSpeed);
            </code>
            </example>
        </member>
        <member name="P:Vrml.EAI.Browser.CurrentFrameRate">
            <summary>
            The current frame rate.
            </summary>
            <value>
            The current frame rate, i.e. the rendering speed, in frames per
            second. This can be 0 when the browser does not support to provide
            this information.
            </value>
            <remarks>This is a read-only property.</remarks>
            <example>
            The following example prints the current frame rate to the
            console:
            <code>
            Vrml.EAI.Browser browser = ...;
            System.Console.WriteLine("Browser.CurrentFrameRate = " + browser.CurrentFrameRate);
            </code>
            </example>
        </member>
        <member name="P:Vrml.EAI.Browser.WorldURL">
            <summary>
            The URL of the scene currently loaded.
            </summary>
            <value>URL of the scene currently loaded.</value>
            <remarks>This is a read-only property.</remarks>
            <example>
            The following example prints the URL of the currently
            loaded 3D scene to the console:
            <code>
            Vrml.EAI.Browser browser = ...;
            System.Console.WriteLine("Browser.WorldURL = \"" + browser.WorldURL + '"');
            </code>
            </example>
        </member>
        <member name="P:Vrml.EAI.Browser.Description">
            <summary>
            The description of the current scene.
            </summary>
            <remarks>
            This is a write-only property. What the browser actually does
            with the description is implementation-specific. Usually, the
            description is printed somewhere in the browser GUI or in the
            title of the browser window.
            </remarks>
            <example>
            The following example demonstrates how to set the description
            of the currently loaded scene:
            <code>
            Vrml.EAI.Browser browser = ...;
            browser.Description = "Hello World!";
            </code>
            </example>
        </member>
        <member name="E:Vrml.EAI.Browser.BrowserEvent">
             <summary>
             Gets fired whenever the state of the browser changes.
             </summary>
             <example>
             The following example demonstrates how to add an <see cref="T:Vrml.EAI.Event.BrowserEventHandler"/> to
             the BrowserEvent, and how to remove it when it is no longer needed:
             <code>
             public class MyClass
             {
                 private static void OnBrowserEvent(object sender, Vrml.EAI.Event.BrowserEvent e)
                 {
                     ...
                 }
            
                 public static void Main(string[] args)
                 {
                     ...
                     Vrml.EAI.Browser browser = ...;
                     browser.BrowserEvent += OnBrowserEvent;
                     ...
                     browser.BrowserEvent -= OnBrowserEvent;
                     ...
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:Vrml.EAI.BrowserFactory">
            <summary>
            Factory that creates new <see cref="T:Vrml.EAI.Browser"/> instances.
            </summary>
            <remarks>
            <para>
            The methods of the BrowserFactory class are the only way
            to create new instances of the <see cref="T:Vrml.EAI.Browser"/> object,
            i.e. it is essential for initiating the connection between
            your software components and the X3D browser.
            </para>
            <para>
            The BrowserFactory itself does not implement much functionality,
            instead it depends on an implementation of the
            <see cref="T:Vrml.EAI.BrowserFactoryImpl"/> interface that has to be provided
            by the deleveloper of the X3D browser you want to use. Usually
            you do not have to care about these details, because the
            BrowserFactory automatically chooses an implementation. See the
            <see cref="M:Vrml.EAI.BrowserFactory.SetBrowserFactoryImpl(Vrml.EAI.BrowserFactoryImpl)"/> method for more information
            about that.
            </para>
            </remarks>
            <example>
            The following example demonstrates how to create a new instance
            of the <see cref="T:Vrml.EAI.Browser"/> interface by using the
            <see cref="M:Vrml.EAI.BrowserFactory.GetBrowser(System.Net.IPAddress,System.Int32)"/> method of the BrowserFactory class:
            <code>
            System.Net.IPAddress address = System.Net.Dns.GetHostByName("localhost").AddressList[0];
            Vrml.EAI.Browser browser = Vrml.EAI.BrowserFactory.GetBrowser(address, 4848);
            ...
            browser.Dispose();
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.BrowserFactory.SetBrowserFactoryImpl(Vrml.EAI.BrowserFactoryImpl)">
            <summary>
            Sets the actual implementation of the BrowserFactory class.
            </summary>
            <remarks>
            <para>
            This method is used only in very rare circumstances. By
            default, the BrowserFactory tries to determine the
            implementation itself when you try to create an instance
            of the <see cref="T:Vrml.EAI.Browser"/> interface for the first time.
            By using this method, you can override the default
            BrowserFactory implementation.
            </para>
            <para>
            The BrowserFactory tries to determine the default implementation
            by looking for a key "vrml.eai.factory.class" in the configuration
            file of your application. E.g. when the name of your application
            is "MyApp.exe", you can put a configuration file with the name
            "MyApp.exe.config" next to the executable with the following
            contents:
            <code><![CDATA[
            <?xml version="1.0" encoding="utf-8" ?>
            <configuration>
              <appSettings>
                <add key="vrml.eai.factory.class" value="MyBrowserFactoryImpl,MyLib" />
              </appSettings>
            </configuration>
            ]]></code>
            This tells the BrowserFactory to use the class "MyBrowserFactoryImpl"
            in the library "MyLib.dll".
            </para>
            <para>
            When the BrowserFactory does not find a BrowserFactory implementation
            in the configuration file, it loads a browser-specific implementation
            (in the case of Instant Player, it's the class
            "InstantReality.Vrml.EAI.BrowserFactoryImpl" in "InstantReality.NET.dll").
            </para>
            <para>
            You have to set the actual implementation before you call any
            other method of this class. Once the implementation is set,
            you cannot change it anymore.
            </para>
            </remarks>
            <param name="fac">The BrowserFactory implementation.</param>
        </member>
        <member name="M:Vrml.EAI.BrowserFactory.GetBrowser(System.Net.IPAddress,System.Int32)">
             <summary>
             Creates a new <see cref="T:Vrml.EAI.Browser"/> object.
             </summary>
             <remarks>
             The <see cref="T:Vrml.EAI.Browser"/> object created by this method allows
             to control a running instance of an X3D browser on the same or
             another machine via the network.
             </remarks>
             <param name="address">
             The address of the machine the X3D browser is running on.
            </param>
             <param name="port">
             The port number the X3D browser is listening on for connections.
             This port number can be configured, but by default it is 4848.
             </param>
             <returns>The new <see cref="T:Vrml.EAI.Browser"/> object.</returns>
             <example>
             The following example demonstrates how to create a new instance
             of the <see cref="T:Vrml.EAI.Browser"/> interface by using the GetBrowser()
             method:
             <code>
             System.Net.IPAddress address = System.Net.Dns.GetHostByName("localhost").AddressList[0];
             Vrml.EAI.Browser browser = Vrml.EAI.BrowserFactory.GetBrowser(address, 4848);
             ...
             browser.Dispose();
             </code>
             </example>
        </member>
        <member name="T:Vrml.EAI.BrowserFactoryImpl">
            <summary>
            Implementation of the <see cref="T:Vrml.EAI.BrowserFactory"/> class.
            </summary>
            <remarks>
            You usually do not use this interface directly - it is used internally
            by the <see cref="T:Vrml.EAI.BrowserFactory"/> class. It contains the actual
            implementation of the <see cref="T:Vrml.EAI.BrowserFactory"/> and has to be
            provided by the developer of the X3D browser you're using.
            </remarks>
        </member>
        <member name="M:Vrml.EAI.BrowserFactoryImpl.GetBrowser(System.Net.IPAddress,System.Int32)">
             <summary>
             Creates a new <see cref="T:Vrml.EAI.Browser"/> object.
             </summary>
             <param name="address">
             The address of the machine the X3D browser is running on.
            </param>
             <param name="port">
             The port number the X3D browser is listening on for connections.
             </param>
             <returns>The new <see cref="T:Vrml.EAI.Browser"/> object.</returns>
        </member>
        <member name="T:Vrml.EAI.ConnectionException">
            <summary>
            Exception that gets thrown when the network connection
            to a running X3D browser instance fails.
            </summary>
            <remarks>
            This exception can be thrown by almost every EAI function
            call. It usually is irreparable, i.e. you have to completely
            reinitialize the connection to the X3D browser.
            </remarks>
            <example>
            The following example demonstrates how to catch a
            ConnectionException and print an error message to the
            console:
            <code>
            try
            {
                ...
            }
            catch (Vrml.EAI.ConnectionException ex)
            {
                System.Console.WriteLine(ex);
            }
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.ConnectionException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Vrml.EAI.ConnectionException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="msg">Message that describes the error.</param>
        </member>
        <member name="T:Vrml.EAI.InvalidBrowserException">
            <summary>
            Exception that gets thrown when you call a method on a
            <see cref="T:Vrml.EAI.Browser"/> object that is not valid.
            </summary>
            <remarks>
            This exception can be thrown by almost every method of
            the <see cref="T:Vrml.EAI.Browser"/> class. It happens when you try to
            call a method of an invalid <see cref="T:Vrml.EAI.Browser"/> object.
            <see cref="T:Vrml.EAI.Browser"/> objects become invalid after calling their
            Dispose method.
            </remarks>
            <example>
            The following example demonstrates how to catch an
            InvalidBrowserException and print an error message to the
            console:
            <code>
            try
            {
                ...
            }
            catch (Vrml.EAI.InvalidBrowserException ex)
            {
                System.Console.WriteLine(ex);
            }
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.InvalidBrowserException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Vrml.EAI.InvalidBrowserException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="msg">Message that describes the error.</param>
        </member>
        <member name="T:Vrml.EAI.InvalidNodeException">
            <summary>
            Exception that gets thrown when you use a <see cref="T:Vrml.EAI.Node"/> object that
            is not valid.
            </summary>
            <remarks>
            This exception can be thrown by almost every method of
            the <see cref="T:Vrml.EAI.Node"/> class. It happens when you try 
            call a method of an invalid <see cref="T:Vrml.EAI.Node"/> object.
            <see cref="T:Vrml.EAI.Node"/> objects become invalid after calling their
            <see cref="M:Vrml.EAI.Node.Dispose"/> method.
            </remarks>
            <example>
            The following example demonstrates how to catch an
            InvalidNodeException and print an error message to the
            console:
            <code>
            try
            {
                ...
            }
            catch (Vrml.EAI.InvalidNodeException ex)
            {
                System.Console.WriteLine(ex);
            }
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.InvalidNodeException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Vrml.EAI.InvalidNodeException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="msg">Message that describes the error.</param>
        </member>
        <member name="T:Vrml.EAI.InvalidURLException">
            <summary>
            Exception that gets thrown when you specify an invalid URL.
            </summary>
            <remarks>
            This exception gets thrown when you call either
            <see cref="M:Vrml.EAI.Browser.LoadURL(System.String[],System.String[])">Browser.LoadURL</see> or
            <see cref="M:Vrml.EAI.Browser.CreateVrmlFromURL(System.String[],Vrml.EAI.Node,System.String)">Browser.CreateVrmlFromURL</see>
            with an URL that is malformed.
            </remarks>
            <example>
            The following example demonstrates how to catch an
            InvalidURLException and print an error message to the
            console:
            <code>
            try
            {
                ...
            }
            catch (Vrml.EAI.InvalidURLException ex)
            {
                System.Console.WriteLine(ex);
            }
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.InvalidURLException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Vrml.EAI.InvalidURLException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="msg">Message that describes the error.</param>
        </member>
        <member name="T:Vrml.EAI.InvalidVrmlException">
            <summary>
            Exception that gets thrown when you specify invalid VRML code.
            </summary>
            <remarks>
            This exception gets thrown from
            <see cref="M:Vrml.EAI.Browser.CreateVrmlFromString(System.String)">Browser.CreateVrmlFromString</see>
            when you call this method with a string that does not contain valid
            VRML code.
            </remarks>
            <example>
            The following example demonstrates how to catch an
            InvalidVrmlException and print an error message to the
            console:
            <code>
            try
            {
                ...
            }
            catch (Vrml.EAI.InvalidVrmlException ex)
            {
                System.Console.WriteLine(ex);
            }
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.InvalidVrmlException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Vrml.EAI.InvalidVrmlException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="msg">Message that describes the error.</param>
        </member>
        <member name="T:Vrml.EAI.Node">
            <summary>
            Reference to a VRML node.
            </summary>
            <remarks>
            The Node object represents nodes of the 3D scene in your
            code. You use it to get access to the fields of the node.
            You can either create new node objects by calling
            <see cref="M:Vrml.EAI.Browser.CreateVrmlFromString(System.String)">Browser.CreateVrmlFromString</see>,
            or you can get references to named nodes in the scene by calling
            <see cref="M:Vrml.EAI.Browser.GetNode(System.String)">Browser.GetNode</see>, or you can get
            nodes from <see cref="T:Vrml.EAI.Field.EventOutSFNode"/> or <see cref="T:Vrml.EAI.Field.EventOutMFNode"/> slots.
            When you are finished with a node, you should call its <see cref="M:Vrml.EAI.Node.Dispose"/>
            method.
            </remarks>
            <example>
            The following example demonstrates how to get a reference to
            a "Group" node called "root" (defined as "DEF root Group {}" in
            the scene), and how to get a reference to its "addChildren" MFNode
            event-in slot:
            <code>
            Vrml.EAI.Browser browser = ...;
            Vrml.EAI.Node group = browser.GetNode("root");
            Vrml.EAI.Field.EventInMFNode addChildren = (Vrml.EAI.Field.EventInMFNode)group.GetEventIn("addChildren");
            ...
            group.Dispose();
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Node.GetEventIn(System.String)">
            <summary>
            Gets an event-in slot of the node.
            </summary>
            <remarks>Whenever you need to write values into fields
            of a node, you have to call this method. It returns a
            reference to an <see cref="T:Vrml.EAI.Field.EventIn"/> object. You have
            to cast that object to the concrete type of the field.
            </remarks>
            <param name="name">The name of the event-in slot</param>
            <returns>The event-in slot.</returns>
            <example>
            The following example demonstrates how to get a reference
            to the "addChildren" field of a "Group" node:
            <code>
            Vrml.EAI.Node group = browser.GetNode(...);
            Vrml.EAI.Field.EventInMFNode addChildren = (Vrml.EAI.Field.EventInMFNode)group.GetEventIn("addChildren");
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Node.GetEventOut(System.String)">
            <summary>
            Gets an event-out slot of the node.
            </summary>
            <remarks>Whenever you need to read values from fields
            of a node, you have to call this method. It returns a
            reference to an <see cref="T:Vrml.EAI.Field.EventOut"/> object. You have
            to cast that object to the concrete type of the field.
            </remarks>
            <param name="name">The name of the event-out slot</param>
            <returns>The event-out slot.</returns>
            <example>
            The following example demonstrates how to get a reference
            to the "isActive" field of a "TouchSensor" node:
            <code>
            Vrml.EAI.Node touchSensor = browser.GetNode(...);
            Vrml.EAI.Field.EventOutSFBool isActive = (Vrml.EAI.Field.EventOutSFBool)touchSensor.GetEventOut("isActive");
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.Node.Dispose">
            <summary>
            Releases all resources held by this node object.
            </summary>
            <remarks>
            You should call this method when you do not need access to
            a node anymore. Calling it is optional - it gets automatically
            called by the destructor of this class - but it is recommended
            to call this method manually because it allows the system to
            release resources held by this object as soon as possible. The
            node object is not valid anymore after calling this method -
            do not call any method of the node object, or you will get an
            <see cref="T:Vrml.EAI.InvalidNodeException"/>. This method does not
            remove the node from the scene - it just removes the connection
            between the EAI node object and the node in the 3D scene.
            </remarks>
        </member>
        <member name="M:Vrml.EAI.Node.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            Node is an abstract class, for this reason there are no public
            constructors, i.e. you cannot create instances of this class.
            Use <see cref="M:Vrml.EAI.Browser.CreateVrmlFromString(System.String)">Browser.CreateVrmlFromString</see>
            or <see cref="M:Vrml.EAI.Browser.GetNode(System.String)">Browser.GetNode</see> to get instances
            of the Node class, or get nodes from <see cref="T:Vrml.EAI.Field.EventOutSFNode"/> or
            <see cref="T:Vrml.EAI.Field.EventOutMFNode"/> slots.
            </remarks>
        </member>
        <member name="P:Vrml.EAI.Node.Type">
            <summary>Returns the type of the node</summary>
            <remarks>This is a readonly property.</remarks>
            <value>The type of the node.</value>
            <example>
            The following example prints the type of a node
            to the console:
            <code>
            Vrml.EAI.Node node = browser.GetNode(...);
            System.Console.WriteLine("node.Type = \"" + node.Type + '"');
            </code>
            </example>
        </member>
        <member name="T:Vrml.EAI.NoSuchBrowserException">
            <summary>
            Exception that gets thrown when you try to get a reference
            to a browser that does not exist.
            </summary>
            <remarks>
            This exception gets thrown by the methods of the
            <see cref="T:Vrml.EAI.BrowserFactory"/> class when they are not able
            to find the browser you specified when calling the methods.
            </remarks>
            <example>
            The following example demonstrates how to catch a
            NoSuchBrowserException and print an error message to the
            console:
            <code>
            try
            {
                ...
            }
            catch (Vrml.EAI.NoSuchBrowserException ex)
            {
                System.Console.WriteLine(ex);
            }
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.NoSuchBrowserException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Vrml.EAI.NoSuchBrowserException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="msg">Message that describes the error.</param>
        </member>
        <member name="T:Vrml.EAI.NotSupportedException">
            <summary>
            Exception that gets thrown when you try to call a method of the
            EAI that is not implemented.
            </summary>
            <remarks>
            This exception gets usually thrown from the <see cref="T:Vrml.EAI.BrowserFactory"/>
            object when you try to create a type of <see cref="T:Vrml.EAI.Browser"/> object that
            is not supported by the EAI implementation.
            </remarks>
            <example>
            The following example demonstrates how to catch a
            NotSupportedException and print an error message to the
            console:
            <code>
            try
            {
                ...
            }
            catch (Vrml.EAI.NotSupportedException ex)
            {
                System.Console.WriteLine(ex);
            }
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.NotSupportedException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Vrml.EAI.NotSupportedException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="msg">Message that describes the error.</param>
        </member>
        <member name="T:Vrml.EAI.URLUnavailableException">
            <summary>
            Exception that gets thrown when the EAI is not able to access
            a resource specified by a URL.
            </summary>
            <remarks>
            This means that the URL refers to a resource on the network
            that either does not exist, or that cannot be downloaded. This exception is
            thrown from either <see cref="M:Vrml.EAI.Browser.LoadURL(System.String[],System.String[])">Browser.LoadURL</see> or
            <see cref="M:Vrml.EAI.Browser.CreateVrmlFromURL(System.String[],Vrml.EAI.Node,System.String)">Browser.CreateVrmlFromURL</see>.
            </remarks>
            <example>
            The following example demonstrates how to catch an
            URLUnavailableException and print an error message to the
            console:
            <code>
            try
            {
                ...
            }
            catch (Vrml.EAI.URLUnavailableException ex)
            {
                System.Console.WriteLine(ex);
            }
            </code>
            </example>
        </member>
        <member name="M:Vrml.EAI.URLUnavailableException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Vrml.EAI.URLUnavailableException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="msg">Message that describes the error.</param>
        </member>
        <member name="T:InstantReality.Vrml.EAI.WinForms.VrmlControl">
            <summary>
            A WinForms Control that is able to render VRML content.
            </summary>
            <remarks>
            <para>
            You may create new instances of the VrmlControl in your code and
            add it to your GUI. But usually, it is more convenient to add the
            VrmlControl to the Toolbox of the Visual Studio Form Designer and
            and to place it per Drag&amp;Drop on your GUI. To get the VrmlControl
            into the Toolbox, do the following:
            </para>
            <list type="bullet">
            <item><description>
            Right-click into the Toolbox and select "Choose Items..." from
            the context menu.
            </description></item>
            <item><description>
            In the dialog "Choose Toolbox Items", bring the ".NET Framework Components"
            tab to the front, and click onto the "Browse..." button.
            </description></item>
            <item><description>
            From the file dialog, select the DLL "InstantReality.NET.dll". It
            is located in the "bin" folder of the Instant Reality installation
            folder ("C:\Program Files\Instant Reality\bin\InstantReality.NET.dll"
            by default).
            </description></item>
            </list>
            <para>
            When you release your application, you have to bundle "InstantReality.NET.dll"
            with your executable. Instant Reality of course must be installed on the
            machine your application is running on.
            </para>
            <para>
            The interface of VrmlControl consists of two properties, "<see cref="P:InstantReality.Vrml.EAI.WinForms.VrmlControl.URL"/>"
            and "<see cref="P:InstantReality.Vrml.EAI.WinForms.VrmlControl.Browser"/>", as well as an event, "<see cref="E:InstantReality.Vrml.EAI.WinForms.VrmlControl.BrowserEvent"/>".
            "URL" and "BrowserEvent" allow to conveniently set the URL of the scene
            rendered in the VrmlControl as well as the
            <see cref="T:Vrml.EAI.Event.BrowserEventHandler"/> from the Visual
            Studio Forms Designer. "Browser" is visible only from code and provides
            access to the EAI <see cref="T:Vrml.EAI.Browser"/> object.
            </para>
            </remarks>
        </member>
        <member name="M:InstantReality.Vrml.EAI.WinForms.VrmlControl.#ctor">
            <summary>
            Constructor.
            </summary>
            <remarks>
            By using this constructor, you may create new instances of the
            VrmlControl and add it to your GUI. But usually it is more convenient
            to add the VrmlControl to the Toolbox of the Visual Studio Form Designer
            and place it per Drag&amp;Drop on your GUI.
            </remarks>
            <example>
            The following example demonstrates how to create a new instance
            of the VrmlControl, and how to put it into a window:
            <code>
            System.Windows.Forms.Form form = new System.Windows.Forms.Form();
            InstantReality.Vrml.EAI.WinForms.VrmlControl control = new InstantReality.Vrml.EAI.WinForms.VrmlControl();
            form.Controls.Add(control);
            </code>
            </example>
        </member>
        <member name="M:InstantReality.Vrml.EAI.WinForms.VrmlControl.Dispose(System.Boolean)">
            <summary>
            Overridden from System.ComponentModel.Component.
            </summary>
            <remarks>
            Releases all resources.
            </remarks>
            <param name="disposing">
            Whether this methods gets called from the Dispose()
            method or from the finalizer.
            </param>
        </member>
        <member name="M:InstantReality.Vrml.EAI.WinForms.VrmlControl.OnCreateControl">
            <summary>
            Overridden from System.Windows.Forms.Control.
            </summary>
            <remarks>
            Used internally to implement the VrmlControl.
            </remarks>
        </member>
        <member name="M:InstantReality.Vrml.EAI.WinForms.VrmlControl.CreateHandle">
            <summary>
            Overridden from System.Windows.Forms.Control.
            </summary>
            <remarks>
            Used internally to implement the VrmlControl.
            </remarks>
        </member>
        <member name="M:InstantReality.Vrml.EAI.WinForms.VrmlControl.DestroyHandle">
            <summary>
            Overridden from System.Windows.Forms.Control.
            </summary>
            <remarks>
            Used internally to implement the VrmlControl.
            </remarks>
        </member>
        <member name="M:InstantReality.Vrml.EAI.WinForms.VrmlControl.OnClientSizeChanged(System.EventArgs)">
            <summary>
            Overridden from System.Windows.Forms.Control.
            </summary>
            <remarks>
            Used internally to implement the VrmlControl.
            </remarks>
            <param name="e">
            Contains more information about the event.
            </param>
        </member>
        <member name="P:InstantReality.Vrml.EAI.WinForms.VrmlControl.URL">
            <summary>
            The URL of the VRML scene.
            </summary>
            <remarks>
            This property allows to conveniently set the scene displayed in the
            VrmlControl in the Visual Studio Forms Designer. You should not use
            this property outside the Forms Designer - from your code use
            <see cref="M:Vrml.EAI.Browser.LoadURL(System.String[],System.String[])"/> instead.
            </remarks>
            <value>
            The URL of the VRML scene initially rendered in the VrmlControl.
            </value>
        </member>
        <member name="E:InstantReality.Vrml.EAI.WinForms.VrmlControl.BrowserEvent">
            <summary>
            Gets fired whenever the state of the browser changes.
            </summary>
            <remarks>
            This event allows to conveniently set the browser event handler from the
            Visual Studio Forms Designer. It is an alias for
            <see cref="E:Vrml.EAI.Browser.BrowserEvent"/>. You should not use
            this event outside the Forms Designer - from your code use
            <see cref="E:Vrml.EAI.Browser.BrowserEvent"/> directly.
            </remarks>
        </member>
        <member name="P:InstantReality.Vrml.EAI.WinForms.VrmlControl.DefaultSize">
            <summary>
            Overridden from System.Windows.Forms.Control.
            </summary>
            <remarks>
            This method currently always returns a size of 160x120.
            This ensures that you can conveniently position the control
            in the Visual Studio Forms Designer.
            </remarks>
            <value>
            The optimal size for the control (currently always 160x120).
            </value>
        </member>
        <member name="P:InstantReality.Vrml.EAI.WinForms.VrmlControl.Browser">
            <summary>
            The <see cref="T:Vrml.EAI.Browser">Browser</see> object.
            </summary>
            <remarks>This is a read-only property.</remarks>
            <value>
            The <see cref="T:Vrml.EAI.Browser">Browser</see> object
            that allows access to the VRML scenegraph.
            </value>
        </member>
        <member name="T:InstantReality.Vrml.EAI.WPF.VrmlControl">
            <summary>
            A WPF Control that is able to render VRML content.
            </summary>
            <remarks>
            <para>
            You may create new instances of the VrmlControl in your code and
            add it to your GUI. But usually, it is more convenient to add the
            VrmlControl to the Toolbox of the Visual Studio Form Designer and
            and to place it per Drag&amp;Drop on your GUI. To get the VrmlControl
            into the Toolbox, do the following:
            </para>
            <list type="bullet">
            <item><description>
            Right-click into the Toolbox and select "Choose Items..." from
            the context menu.
            </description></item>
            <item><description>
            In the dialog "Choose Toolbox Items", bring the "WPF Components"
            tab to the front, and click onto the "Browse..." button.
            </description></item>
            <item><description>
            From the file dialog, select the DLL "InstantReality.NET.dll". It
            is located in the "bin" folder of the Instant Reality installation
            folder ("C:\Program Files\Instant Reality\bin\InstantReality.NET.dll"
            by default).
            </description></item>
            </list>
            <para>
            When you release your application, you have to bundle "InstantReality.NET.dll"
            with your executable. Instant Reality of course must be installed on the
            machine your application is running on.
            </para>
            <para>
            The interface of VrmlControl consists of two properties, "<see cref="P:InstantReality.Vrml.EAI.WPF.VrmlControl.URL"/>"
            and "<see cref="P:InstantReality.Vrml.EAI.WPF.VrmlControl.Browser"/>", as well as an event, "<see cref="E:InstantReality.Vrml.EAI.WPF.VrmlControl.BrowserEvent"/>".
            "URL" and "BrowserEvent" allow to conveniently set the URL of the scene
            rendered in the VrmlControl as well as the
            <see cref="T:Vrml.EAI.Event.BrowserEventHandler"/> from the Visual
            Studio Forms Designer. "Browser" is visible only from code and provides
            access to the EAI <see cref="T:Vrml.EAI.Browser"/> object.
            </para>
            </remarks>
        </member>
        <member name="M:InstantReality.Vrml.EAI.WPF.VrmlControl.#ctor">
            <summary>
            Constructor.
            </summary>
            <remarks>
            By using this constructor, you may create new instances of the
            VrmlControl and add it to your GUI. But usually it is more convenient
            to add the VrmlControl to the Toolbox of the Visual Studio Form Designer
            and place it per Drag&amp;Drop on your GUI.
            </remarks>
            <example>
            The following example demonstrates how to create a new instance
            of the VrmlControl, and how to put it into a window:
            <code>
            System.Windows.Window window = new System.Windows.Window();
            InstantReality.Vrml.EAI.WPF.VrmlControl control = new InstantReality.Vrml.EAI.WPF.VrmlControl();
            window.Content = control;
            </code>
            </example>
        </member>
        <member name="M:InstantReality.Vrml.EAI.WPF.VrmlControl.MeasureOverride(System.Windows.Size)">
            <summary>
            Overridden from System.Windows.Controls.Control.
            </summary>
            <remarks>
            This method currently always returns a size of 160x120.
            This ensures that you can conveniently position the control
            in the Visual Studio Forms Designer.
            </remarks>
            <param name="availableSize">
            The size available for the control.
            </param>
            <returns>
            The optimal size for the control (currently always 160x120).
            </returns>
        </member>
        <member name="M:InstantReality.Vrml.EAI.WPF.VrmlControl.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Overridden from  System.Windows.UIElement.
            </summary>
            <remarks>
            This method either draws the Instant Reality logo when the
            the VrmlControl is rendered in the Visual Studio Forms Designer, or an
            error message when it cannot find Instant Reality installed
            on the machine the application is running on. It does not do
            any OpenGL rendering of the VRML szene - this is handled
            internally.
            </remarks>
            <param name="dc">
            The drawing context used to draw the control.
            </param>
        </member>
        <member name="M:InstantReality.Vrml.EAI.WPF.VrmlControl.CreateScreenshot">
            <summary>
            Creates a screenshot of the currently rendered scene.
            </summary>
            <returns>
            The screenshot.
            </returns>
        </member>
        <member name="P:InstantReality.Vrml.EAI.WPF.VrmlControl.URL">
            <summary>
            The URL of the VRML scene.
            </summary>
            <remarks>
            This property allows to conveniently set the scene displayed in the
            VrmlControl in the Visual Studio Forms Designer. You should not use
            this property outside the Forms Designer - from your code use
            <see cref="M:Vrml.EAI.Browser.LoadURL(System.String[],System.String[])"/> instead.
            </remarks>
            <value>
            The URL of the VRML scene initially rendered in the VrmlControl.
            </value>
        </member>
        <member name="P:InstantReality.Vrml.EAI.WPF.VrmlControl.Sample">
            <summary>
            Controls multisampling when rendering the VRML scene.
            </summary>
            <remarks>
            
            </remarks>
            <value>
            The number of samples per pixel.
            </value>
        </member>
        <member name="E:InstantReality.Vrml.EAI.WPF.VrmlControl.BrowserEvent">
            <summary>
            Gets fired whenever the state of the browser changes.
            </summary>
            <remarks>
            This event allows to conveniently set the browser event handler from the
            Visual Studio Forms Designer. It is an alias for
            <see cref="E:Vrml.EAI.Browser.BrowserEvent"/>. You should not use
            this event outside the Forms Designer - from your code use
            <see cref="E:Vrml.EAI.Browser.BrowserEvent"/> directly.
            </remarks>
        </member>
        <member name="P:InstantReality.Vrml.EAI.WPF.VrmlControl.Browser">
            <summary>
            The <see cref="T:Vrml.EAI.Browser">Browser</see> object.
            </summary>
            <remarks>This is a read-only property.</remarks>
            <value>
            The <see cref="T:Vrml.EAI.Browser">Browser</see> object
            that allows access to the VRML scenegraph.
            </value>
        </member>
        <member name="T:InstantReality.Vrml.EAI.BrowserFactoryImpl">
            <summary>
            Instant Reality-specific implementation of the <see cref="T:Vrml.EAI.BrowserFactory"/> class.
            </summary>
            <remarks>
            You usually do not use this interface directly - it is used internally
            by the <see cref="T:Vrml.EAI.BrowserFactory"/> class. It contains the actual
            implementation of the <see cref="T:Vrml.EAI.BrowserFactory"/> for Instant Reality.
            </remarks>
        </member>
        <member name="M:InstantReality.Vrml.EAI.BrowserFactoryImpl.#ctor">
            <summary>
            Creates a new instance of the BrowserFactoryImpl class.
            </summary>
        </member>
        <member name="M:InstantReality.Vrml.EAI.BrowserFactoryImpl.GetBrowser(System.Net.IPAddress,System.Int32)">
             <summary>
             Creates a new <see cref="T:Vrml.EAI.Browser"/> object.
             </summary>
             <param name="address">
             The address of the machine the X3D browser is running on.
            </param>
             <param name="port">
             The port number the X3D browser is listening on for connections.
             </param>
             <returns>The new <see cref="T:Vrml.EAI.Browser"/> object.</returns>
        </member>
    </members>
</doc>
